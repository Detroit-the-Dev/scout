{"version":3,"sources":["utils/socrata.js","contexts/OpenDataContext.js","hooks/datasets.js","components/CategorySelector.js","components/Dataset.js","components/TagSelector.js","layout/HomePage.js","hooks/pagination.js","layout/DatasetPage.js","App.js","serviceWorker.js","index.js"],"names":["SOCRATA_NY_OPENDATA_ENDPOINT","getMaifestPage","pageNo","a","async","limit","fetch","then","r","json","matachableColumnsForDataset","dataset","Set","resource","columns_name","columns_field_name","hasJoinableMatch","columns","candidate","candidateCols","intersection","filter","x","has","Array","from","AppContext","createContext","initalState","datasets","tagList","categories","stateLoaded","reducer","state","action","type","payload","useStateValue","useContext","useJoinableDatasets","console","log","useMemo","cols","map","joinableColumns","match","length","id","findJoinable","CategorySelector","selected","onChange","className","cat","key","onClick","newSelection","includes","c","toggleCategory","Dataset","to","name","description","classification","domain_tags","join","TagSelector","tags","tag","t","toggleTag","HomePage","useCategories","useTags","useState","selectedTags","setSelectedTags","selectedCategories","setSelectedCategories","searchTerm","setSearchTerm","term","filteredDatasets","toLowerCase","useDatasets","data","perPage","items","useEffect","setCurrentPageNo","pages","Math","ceil","currentPageNo","pageButtons","_","page","slice","usePagination","pagedDatasets","e","target","value","placeholder","DatasetPage","datasetID","find","d","useDataset","params","joins","Fragment","index","columns_datatype","style","overflowY","j","App","basename","process","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","children","useReducer","dispatch","storedState","localStorage","getItem","JSON","parse","firstPage","totalEntries","resultSetSize","Promise","all","i","resp","results","list","reduce","datasetPage","allDatasets","getManifest","result","getTagList","cats","getCategories","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b2f8b8c9.chunk.js","sourcesContent":["const SOCRATA_NY_OPENDATA_ENDPOINT =\n  'http://api.us.socrata.com/api/catalog/v1?domains=data.cityofnewyork.us&search_context=data.cityofnewyork.us';\n\nasync function getMaifestPage(pageNo, limit = 100) {\n  return fetch(\n    `${SOCRATA_NY_OPENDATA_ENDPOINT}&offset=${pageNo * limit}&limit=${limit}`,\n  ).then(r => r.json());\n}\n\nfunction matachableColumnsForDataset(dataset) {\n  return new Set([\n    ...dataset.resource.columns_name,\n    ...dataset.resource.columns_field_name,\n  ]);\n}\n\nfunction hasJoinableMatch(columns, candidate) {\n  const candidateCols = matachableColumnsForDataset(candidate);\n  let intersection = new Set([...columns].filter(x => candidateCols.has(x)));\n  return Array.from(intersection);\n}\n\nexport function findJoinable(dataset, datasets) {\n  const cols = matachableColumnsForDataset(dataset);\n  const matches = datasets\n    .map(candidate => ({\n      dataset: candidate,\n      joinableColumns: hasJoinableMatch(cols, candidate),\n    }))\n    .filter(\n      match =>\n        match.joinableColumns.length > 0 &&\n        match.dataset.resource.id !== dataset.resource.id,\n    );\n  return matches;\n}\n\n/**\n * Get the full manifest from Socrata. This should be cached locally and updated in a smart way.\n *\n * @return {Promise(Array)} a promise that resolves to an array of the datasets\n */\nexport async function getManifest() {\n  const firstPage = await getMaifestPage(0, 1);\n  const totalEntries = firstPage.resultSetSize;\n  const pages = Math.ceil(totalEntries / 100);\n  return Promise.all(\n    [...Array(pages)].map((_, i) =>\n      getMaifestPage(i).then(resp => resp.results),\n    ),\n  ).then(list =>\n    list.reduce(\n      (datasetPage, allDatasets) => [...allDatasets, ...datasetPage],\n      [],\n    ),\n  );\n}\n\n/**\n * Extract from the datasets array, a unique set of categories.\n * @return {Array<string>} an array of unique categories\n */\nexport function getCategories(datasets) {\n  const categories = datasets.reduce(\n    (cats, dataset) => [\n      ...cats,\n      ...(dataset.classification.categories\n        ? dataset.classification.categories\n        : []),\n    ],\n    [],\n  );\n  const unique = Array.from(new Set(categories));\n  return unique;\n}\n\n/**\n * Extract from the datasets array, a unique set of tags.\n * @return {Array<string>} an array of unique tags\n */\nexport function getTagList(datasets) {\n  const tagList = datasets.reduce(\n    (tags, dataset) => [\n      ...tags,\n      ...(dataset.classification.domain_tags\n        ? dataset.classification.domain_tags\n        : []),\n    ],\n    [],\n  );\n  return Array.from(new Set(tagList));\n}\n","import React, {createContext, useContext, useReducer, useEffect} from 'react';\nimport {getManifest, getCategories, getTagList} from '../utils/socrata';\n\nexport const AppContext = createContext();\n\nconst initalState = {\n  datasets: [],\n  tagList: [],\n  categories: [],\n  stateLoaded: false,\n};\n\nconst reducer = (state, action) => {\n  const {type, payload} = action;\n  switch (type) {\n    case 'UPDATE_OPEN_DATASET_MANIFEST':\n      return {...state, datasets: payload};\n    case 'UPDATE_TAGS':\n      return {...state, tagList: payload};\n    case 'UPDATE_CATEGORIES':\n      return {...state, categories: payload};\n    case 'HYDRATE_STATE':\n      return {...state, ...payload};\n    case 'SET_LOADED':\n      return {...state, stateLoaded: true};\n    default:\n      return state;\n  }\n};\n\nexport const StateProvider = ({children}) => {\n  const [state, dispatch] = useReducer(reducer, initalState);\n\n  useEffect(() => {\n    const storedState = localStorage.getItem('seralizedState');\n    if (storedState) {\n      dispatch({\n        type: 'HYDRATE_STATE',\n        payload: {...JSON.parse(storedState), stateLoaded: true},\n      });\n    } else {\n      getManifest().then(result => {\n        const tagList = getTagList(result);\n        const categories = getCategories(result);\n        dispatch({\n          type: 'UPDATE_OPEN_DATASET_MANIFEST',\n          payload: result,\n        });\n        dispatch({\n          type: 'UPDATE_TAGS',\n          payload: tagList,\n        });\n        dispatch({\n          type: 'UPDATE_CATEGORIES',\n          payload: categories,\n        });\n        dispatch({\n          type: 'SET_LOADED',\n          payload: true,\n        });\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    console.log('State updated ', state);\n    if (state.stateLoaded) {\n      console.log('PERSISTING');\n      const {datasets, tagList, categories} = state;\n      //localStorage.setItem(\n      //      'storedState',\n      //      JSON.stringify({datasets, tagList, categories}),\n      //    );\n    }\n  }, [state]);\n\n  return (\n    <AppContext.Provider value={[state, dispatch]}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport const useStateValue = () => useContext(AppContext);\n","import {useMemo} from 'react';\nimport {useStateValue} from '../contexts/OpenDataContext';\nimport {findJoinable} from '../utils/socrata';\n\nexport function useTags() {\n  const [{tagList}] = useStateValue();\n  return tagList;\n}\n\nexport function useCategories() {\n  const [{categories}] = useStateValue();\n  return categories;\n}\n\nexport function useJoinableDatasets(dataset) {\n  const [{datasets}] = useStateValue();\n  console.log(dataset);\n  return useMemo(() => (dataset ? findJoinable(dataset, datasets) : []), [\n    dataset,\n    datasets,\n  ]);\n}\n\nexport function useDataset(datasetID) {\n  let [{datasets}] = useStateValue();\n  return datasets.find(d => d.resource.id === datasetID);\n}\n\nexport function useDatasets({tags, term, categories}) {\n  let [{datasets}] = useStateValue();\n  return useMemo(() => {\n    let filteredDatasets = [...datasets];\n\n    if (tags && tags.length > 0) {\n      console.log('applting');\n      filteredDatasets = filteredDatasets.filter(\n        dataset =>\n          dataset.classification.domain_tags.filter(tag => tags.includes(tag))\n            .length > 0,\n      );\n    }\n\n    if (categories && categories.length > 0) {\n      filteredDatasets = filteredDatasets.filter(\n        dataset =>\n          dataset.classification.categories.filter(cat =>\n            categories.includes(cat),\n          ).length > 0,\n      );\n    }\n\n    if (term && term.length > 0) {\n      filteredDatasets = filteredDatasets.filter(dataset =>\n        dataset.resource.name.toLowerCase().includes(term.toLowerCase()),\n      );\n    }\n\n    console.log('after term ', filteredDatasets.length);\n    console.log('return size ', filteredDatasets.length);\n    return filteredDatasets;\n  }, [tags, term, categories, datasets]);\n}\n","import React from 'react';\n\nexport default function CategorySelector({categories, selected, onChange}) {\n  const clearCategories = () => {\n    onChange([]);\n  };\n\n  const toggleCategory = cat => {\n    const newSelection = selected.includes(cat)\n      ? selected.filter(c => c !== cat)\n      : [...selected, cat];\n\n    onChange(newSelection);\n  };\n\n  return (\n    <div className=\"category-selector\">\n      <h2>Categories</h2>\n      <ul className=\"category-list\">\n        {categories.map(cat => (\n          <li\n            key={cat}\n            onClick={() => toggleCategory(cat)}\n            className={`category-buttons ${\n              selected && selected.includes(cat) ? 'selected' : ''\n            }`}>\n            {cat}\n          </li>\n        ))}\n      </ul>\n      {selected && selected.length > 0 && (\n        <button onClick={clearCategories}>clear</button>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nexport default function Dataset({dataset}) {\n  return (\n    <div className=\"dataset\" key={dataset.resource.id}>\n      <h4 className=\"dataset-title\">\n        <Link to={`/dataset/${dataset.resource.id}`}>\n          {dataset.resource.name}\n        </Link>\n      </h4>\n      <p className=\"dataset-description\">{dataset.resource.description}</p>\n      <p className=\"dataset-tags\">\n        {dataset.classification.domain_tags.join(', ')}\n      </p>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function TagSelector({tags, selected, onChange}) {\n  const clearTags = () => {\n    onChange([]);\n  };\n\n  const toggleTag = tag => {\n    console.log('old tags ', selected);\n    const newSelection = selected.includes(tag)\n      ? selected.filter(t => t !== tag)\n      : [...selected, tag];\n\n    console.log('new tags ', newSelection);\n    onChange(newSelection);\n  };\n\n  return (\n    <div className=\"tag-selector\">\n      <h2>Tags</h2>\n      {tags && (\n        <ul className=\"tag-list\">\n          {tags.map(tag => (\n            <li\n              className={selected.includes(tag) ? 'selected' : ''}\n              onClick={() => toggleTag(tag)}\n              key={tag}>\n              {tag}\n            </li>\n          ))}\n        </ul>\n      )}\n      {selected.length > 0 && <button onClick={clearTags}>clear</button>}\n    </div>\n  );\n}\n","import React, {useState} from 'react';\nimport {useCategories, useTags, useDatasets} from '../hooks/datasets';\nimport {findJoinable} from '../utils/socrata';\nimport CategorySelector from '../components/CategorySelector';\nimport Dataset from '../components/Dataset';\nimport usePagination from '../hooks/pagination';\nimport TagSelector from '../components/TagSelector';\n\nexport default function HomePage({}) {\n  const categories = useCategories();\n  const tags = useTags();\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [selectedCategories, setSelectedCategories] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const datasets = useDatasets({\n    tags: selectedTags,\n    categories: selectedCategories,\n    term: searchTerm,\n  });\n  const [pagedDatasets, {pageButtons}] = usePagination(datasets);\n\n  return (\n    <div className=\"home-page\">\n      <div className=\"categories\">\n        <CategorySelector\n          categories={categories}\n          onChange={setSelectedCategories}\n          selected={selectedCategories}\n        />\n      </div>\n\n      <div className=\"tags\">\n        <TagSelector\n          tags={tags}\n          selected={selectedTags}\n          onChange={setSelectedTags}\n        />\n      </div>\n      <div className=\"datasets\">\n        <h2>\n          Datasets ({pagedDatasets.length} / {datasets.length} )\n        </h2>\n        <div className=\"search\">\n          <input\n            type=\"text\"\n            onChange={e => setSearchTerm(e.target.value)}\n            value={searchTerm}\n            placeholder=\"search\"\n          />\n        </div>\n        <ul className=\"dataset-list\">\n          {pagedDatasets.map(dataset => (\n            <Dataset dataset={dataset} />\n          ))}\n        </ul>\n        <div className=\"pagination\">{pageButtons}</div>\n      </div>\n    </div>\n  );\n}\n","import React, {useState, useMemo, useEffect} from 'react';\n\nexport default function usePagination(data, perPage = 20) {\n  const items = useMemo(() => data.length, [data]);\n\n  useEffect(() => {\n    setCurrentPageNo(0);\n  }, [data]);\n\n  const pages = Math.ceil(items / perPage);\n\n  const [currentPageNo, setCurrentPageNo] = useState(0);\n  const pageButtons = [...Array(pages)].map((_, page) => (\n    <span\n      className={page === currentPageNo ? 'selected' : ''}\n      onClick={() => setCurrentPageNo(page)}>\n      {' '}\n      {page + 1}{' '}\n    </span>\n  ));\n\n  const content = useMemo(\n    () => data.slice(currentPageNo * perPage, (currentPageNo + 1) * perPage),\n    [perPage, currentPageNo, data],\n  );\n\n  return [content, {pageButtons, setCurrentPageNo, currentPageNo}];\n}\n","import React from 'react';\nimport {useDataset, useJoinableDatasets} from '../hooks/datasets';\nimport {Link} from 'react-router-dom';\n\nexport default function DatasetPage({match}) {\n  const {datasetID} = match.params;\n  const dataset = useDataset(datasetID);\n  const joins = useJoinableDatasets(dataset);\n  return (\n    <div className=\"dataset-page\">\n      {dataset ? (\n        <React.Fragment>\n          <div className={'dataset-header'}>\n            <h1>Dataset {dataset.resource.name}</h1>\n            <p>{dataset.resource.description}</p>\n          </div>\n          <div className={'dataset-columns'}>\n            <h2>Columns</h2>\n            <ul className=\"columns-list\">\n              {dataset.resource.columns_name.map((name, index) => (\n                <li>\n                  {name} : {dataset.resource.columns_datatype[index]}\n                </li>\n              ))}\n            </ul>\n          </div>\n          <div className={'dataset-joins'}>\n            <h2>Can be joined with</h2>\n            <ul style={{overflowY: 'auto'}}>\n              {joins.map(j => (\n                <li>\n                  <p>\n                    <Link to={`/dataset/${j.dataset.resource.id}`}>\n                      {j.dataset.resource.name}{' '}\n                    </Link>{' '}\n                    on :\n                  </p>\n                  <p> {j.joinableColumns.join(', ')}</p>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </React.Fragment>\n      ) : (\n        <h1>Loading...</h1>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport HomePage from './layout/HomePage';\nimport DatasetPage from './layout/DatasetPage';\n\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <Route path=\"/\" exact={true} component={HomePage} />\n        <Route\n          path=\"/dataset/:datasetID\"\n          exact={true}\n          component={DatasetPage}\n        />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {StateProvider} from './contexts/OpenDataContext';\n\nReactDOM.render(\n  <StateProvider>\n    <App />\n  </StateProvider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}