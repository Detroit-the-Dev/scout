{"version":3,"sources":["utils/socrata.js","contexts/OpenDataContext.jsx","hooks/datasets.js","contexts/CollectionsContext.jsx","hooks/collections.js","components/RawHTML/RawHTML.jsx","components/Dataset/Dataset.jsx","utils/formatters.js","hooks/pagination.jsx","components/MultiSelector/MultiSelector.jsx","layout/HomePage/HomePage.jsx","components/JoinColumn/JoinColumn.jsx","components/ColumnSuggestions/ColumnSuggestions.jsx","components/ColumnMatchTable/ColumnMatchTable.jsx","layout/DatasetPage/DatasetPage.jsx","components/CollectionBar/CollectionBar.jsx","hooks/useClipboard.js","layout/CollectionPage/CollectionPage.jsx","components/CreateCollectionModal/CreateCollectionModal.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["SOCRATA_NY_OPENDATA_ENDPOINT","ALLOWED_JOIN_COLUMNS","getMaifestPage","pageNo","a","async","limit","fetch","then","r","json","matachableColumnsForDataset","dataset","Set","resource","columns_name","columns_field_name","hasJoinableMatch","columns","candidate","candidateCols","intersection","filter","x","has","includes","Array","from","getUniqueEntries","column","id","replace","errorCode","map","entry","Object","values","db","Dexie","version","stores","SocrataCache","AppContext","createContext","initalState","datasets","tagList","categories","departments","stateLoaded","reducer","state","action","type","payload","useStateValue","useContext","useJoinableDatasets","useMemo","cols","joinableColumns","match","length","findJoinable","useDatasets","tags","term","ids","filteredDatasets","d","classification","domain_tags","tag","cat","domain_metadata","find","key","value","name","toLowerCase","CollectionsContext","useCollection","dispatch","clearCollection","console","log","addToCollection","datasetID","removeFromCollection","setName","RawHTML","html","className","cleanedHTML","DOMPurify","sanitize","dangerouslySetInnerHTML","__html","Dataset","date","onAddToCollection","onRemoveFromCollection","inCollection","viewInOpenPortal","to","attribution","onClick","target","rel","href","permalink","icon","faExternalLinkAlt","updatedAt","Date","toLocaleDateString","year","month","day","description","join","usePagination","data","perPage","pages","Math","ceil","useState","currentPageNo","setCurrentPageNo","useEffect","pageButtons","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","onPageChange","page","selected","containerClassName","subContainerClassName","activeClassName","previousClassName","nextClassName","pageClassName","content","slice","MultiSelector","items","onChange","title","searchTerm","setSearchTerm","itemNames","keys","usePagenation","item","pagedItems","placeholder","e","newSelection","i","toggleItem","checked","HomePage","useCategories","useTags","useDepartments","selectedTags","setSelectedTags","selectedCategories","setSelectedCategories","selectedDepartments","setSelectedDepartments","collection","pagedDatasets","ColumnJoin","rightDataset","joinCol","parentUniques","collapsed","setCollapsed","uniqueIds","uniqueEntries","setUniqueEntries","res","distinct","useUniqueColumnEntries","jointlyUnique","onKeyDown","keycode","role","tabIndex","faAngleRight","faAngleDown","faFile","uid","faTable","ColumnSuggestions","joins","columnUniques","setColumnsUniques","dataTypeForCol","columns_datatype","indexOf","pagedJoins","onKeydown","keyCode","leftDataset","ColumnMatchTable","joinColumns","suggestionsForColumn","useCallback","col","candidates","c","sortedColumns","sort","b","formatDate","moment","format","DatasetPage","useDataset","params","similarDatasets","activeTab","setActiveTab","pageViews","page_views","domainMetadata","updatedAutomation","updateFrequency","informationAgency","alt","src","owner","display_name","domain_category","metadata_updated_at","page_views_total","CollectionContext","copyToClipboard","text","navigator","clipboard","writeText","document","queryCommandSupported","textarea","createElement","style","opacity","textContent","position","body","appendChild","select","execCommand","removeChild","CollectionPage","datasetIDs","url","window","location","split","isCopied","setIsCopied","useClipboard","setCopied","FacebookShareButton","FacebookIcon","size","TwitterShareButton","TwitterIcon","EmailShareButton","EmailIcon","CreateCollectionModal","history","newCollection","collectionURL","push","createCollection","App","basename","process","path","exact","component","parentPath","Boolean","hostname","ReactDOM","render","children","useReducer","get","result","cachedState","JSON","parse","cache_loaded","firstPage","totalEntries","resultSetSize","Promise","all","_","resp","results","list","reduce","datasetPage","allDatasets","getManifest","manifest","totals","getTagList","cats","getCategories","md","department","getDepartments","put","stringify","Provider","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0bd0dc04.chunk.js","sourcesContent":["const SOCRATA_NY_OPENDATA_ENDPOINT =\n  'https://api.us.socrata.com/api/catalog/v1?domains=data.cityofnewyork.us&search_context=data.cityofnewyork.us';\n\nconst ALLOWED_JOIN_COLUMNS = [\n  'BIN',\n  'BBL',\n  'NTA',\n  'Community Board',\n  'Census Tract',\n  'DBN',\n  'Council District',\n  'School Name',\n  'City Council Districts',\n  'DFTA ID',\n];\n\nasync function getMaifestPage(pageNo, limit = 100) {\n  return fetch(\n    `${SOCRATA_NY_OPENDATA_ENDPOINT}&offset=${pageNo * limit}&limit=${limit}`,\n  ).then((r) => r.json());\n}\n\nfunction matachableColumnsForDataset(dataset) {\n  return new Set([\n    ...dataset.resource.columns_name,\n    ...dataset.resource.columns_field_name,\n  ]);\n}\n\nfunction hasJoinableMatch(columns, candidate) {\n  const candidateCols = matachableColumnsForDataset(candidate);\n  const intersection = new Set(\n    [...columns].filter(\n      (x) => candidateCols.has(x) && ALLOWED_JOIN_COLUMNS.includes(x),\n    ),\n  );\n  return Array.from(intersection);\n}\n\nexport function findJoinable(dataset, datasets) {\n  const cols = matachableColumnsForDataset(dataset);\n  const matches = datasets\n    .map((candidate) => ({\n      dataset: candidate,\n      joinableColumns: hasJoinableMatch(cols, candidate),\n    }))\n    .filter(\n      (match) =>\n        match.joinableColumns.length > 0 &&\n        match.dataset.resource.id !== dataset.resource.id,\n    );\n  return matches;\n}\n\n/**\n * Get the full manifest from Socrata. This should be cached locally and updated in a smart way.\n *\n * @return {Promise(Array)} a promise that resolves to an array of the datasets\n */\nexport async function getManifest() {\n  const firstPage = await getMaifestPage(0, 1);\n  const totalEntries = firstPage.resultSetSize;\n  const pages = Math.ceil(totalEntries / 100);\n  return Promise.all(\n    [...Array(pages)].map((_, i) =>\n      getMaifestPage(i).then((resp) => resp.results),\n    ),\n  ).then((list) =>\n    list.reduce(\n      (datasetPage, allDatasets) => [...allDatasets, ...datasetPage],\n      [],\n    ),\n  );\n}\n\n/**\n * Extract from the datasets array, a unique set of categories.\n * @return {Array<string>} an array of unique categories\n */\nexport function getCategories(datasets) {\n  const categories = datasets.reduce(\n    (cats, dataset) => [\n      ...cats,\n      ...(dataset.classification.categories\n        ? dataset.classification.categories\n        : []),\n    ],\n    [],\n  );\n\n  const counts = categories.reduce(\n    (totals, cat) =>\n      cat in totals\n        ? { ...totals, [cat]: totals[cat] + 1 }\n        : { ...totals, [cat]: 1 },\n    {},\n  );\n  return counts;\n}\n\n/**\n * Extract from the datasets array, a unique set of categories.\n * @return {Array<string>} an array of unique categories\n */\nexport function getDepartments(datasets) {\n  const departments = datasets\n    .map((dataset) =>\n      dataset.classification.domain_metadata.find(\n        (md) => md.key === 'Dataset-Information_Agency',\n      ),\n    )\n    .filter((d) => d)\n    .map((d) => d.value);\n  const counts = departments.reduce(\n    (totals, department) =>\n      department in totals\n        ? { ...totals, [department]: totals[department] + 1 }\n        : { ...totals, [department]: 1 },\n    {},\n  );\n  return counts;\n}\n/**\n * Extract from the datasets array, a unique set of tags.\n * @return {Array<string>} an array of unique tags\n */\nexport function getTagList(datasets) {\n  const tagList = datasets.reduce(\n    (tags, dataset) => [\n      ...tags,\n      ...(dataset.classification.domain_tags\n        ? dataset.classification.domain_tags\n        : []),\n    ],\n    [],\n  );\n  const counts = tagList.reduce(\n    (totals, tag) =>\n      tag in totals\n        ? { ...totals, [tag]: totals[tag] + 1 }\n        : { ...totals, [tag]: 1 },\n    {},\n  );\n  return counts;\n}\n\nexport function getUniqueEntriesCount(dataset, column) {\n  return fetch(\n    `https://data.cityofnewyork.us/resource/${\n      dataset.resource.id\n    }.json?$select=distinct|> select count(*) ${column.replace(/ /g, '_')}`,\n  ).then((r) => r.json());\n}\nexport function getUniqueEntries(dataset, column) {\n  return fetch(\n    `https://data.cityofnewyork.us/resource/${\n      dataset.resource.id\n    }.json?$select=distinct ${column.replace(/ /g, '_')}`,\n  )\n    .then((r) => r.json())\n    .then((r) => {\n      return r.errorCode ? [] : r.map((entry) => Object.values(entry)[0]);\n    });\n}\n","import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport Dexie from 'dexie';\nimport {\n  getManifest,\n  getCategories,\n  getTagList,\n  getDepartments,\n} from '../utils/socrata';\n\nconst db = new Dexie('SocrataCache');\ndb.version(1).stores({\n  SocrataCache: 'id',\n});\n\nexport const AppContext = createContext();\n\nconst initalState = {\n  datasets: [],\n  tagList: [],\n  categories: [],\n  departments: [],\n  stateLoaded: false,\n};\n\nconst reducer = (state, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case 'UPDATE_OPEN_DATASET_MANIFEST':\n      return { ...state, datasets: payload };\n    case 'UPDATE_TAGS':\n      return { ...state, tagList: payload };\n    case 'UPDATE_CATEGORIES':\n      return { ...state, categories: payload };\n    case 'UPDATE_DEPARTMENTS':\n      return { ...state, departments: payload };\n    case 'HYDRATE_STATE':\n      return { ...state, ...payload };\n    case 'SET_LOADED':\n      return { ...state, stateLoaded: true };\n    default:\n      return state;\n  }\n};\n\nexport const StateProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initalState);\n\n  // Try to get the state locally from indexed db... if we can't find it there, request it from the\n  // socrata API\n\n  useEffect(() => {\n    db.SocrataCache.get(1).then((result) => {\n      if (result) {\n        const cachedState = JSON.parse(result.data);\n        dispatch({\n          type: 'HYDRATE_STATE',\n          payload: { ...initalState, ...cachedState, cache_loaded: true },\n        });\n      } else {\n        getManifest().then((manifest) => {\n          const tagList = getTagList(manifest);\n          const categories = getCategories(manifest);\n          const departments = getDepartments(manifest);\n          dispatch({\n            type: 'UPDATE_OPEN_DATASET_MANIFEST',\n            payload: manifest,\n          });\n          dispatch({\n            type: 'UPDATE_TAGS',\n            payload: tagList,\n          });\n          dispatch({\n            type: 'UPDATE_CATEGORIES',\n            payload: categories,\n          });\n          dispatch({\n            type: 'UPDATE_DEPARTMENTS',\n            payload: departments,\n          });\n          dispatch({\n            type: 'SET_LOADED',\n          });\n        });\n      }\n    });\n  }, []);\n\n  // If our datasets change, update the cahced version\n  const { datasets, tagList, categories, departments, stateLoaded } = state;\n  useEffect(() => {\n    if (stateLoaded) {\n      db.SocrataCache.put({\n        data: JSON.stringify({\n          datasets,\n          tagList,\n          categories,\n          departments,\n        }),\n        id: 1,\n      });\n    }\n  }, [datasets, tagList, categories, departments, stateLoaded]);\n\n  return (\n    <AppContext.Provider value={[state, dispatch]}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport const useStateValue = () => useContext(AppContext);\n","import { useMemo, useState, useEffect } from 'react';\nimport { useStateValue } from '../contexts/OpenDataContext';\nimport { findJoinable, getUniqueEntries } from '../utils/socrata';\n\nexport function useTags() {\n  const [{ tagList }] = useStateValue();\n  return tagList;\n}\n\nexport function useCategories() {\n  const [{ categories }] = useStateValue();\n  return categories;\n}\n\nexport function useDepartments() {\n  const [{ departments }] = useStateValue();\n  return departments;\n}\n\nexport function useJoinableDatasets(dataset) {\n  const [{ datasets }] = useStateValue();\n  return useMemo(() => (dataset ? findJoinable(dataset, datasets) : []), [\n    dataset,\n    datasets,\n  ]);\n}\n\nexport function useDataset(datasetID) {\n  const [{ datasets }] = useStateValue();\n  return datasets.find((d) => d.resource.id === datasetID);\n}\n\nexport function useDatasets({ tags, term, categories, departments, ids }) {\n  const [{ datasets }] = useStateValue();\n\n  return useMemo(() => {\n    let filteredDatasets = [...datasets];\n\n    if (ids) {\n      return filteredDatasets.filter((d) => ids.includes(d.resource.id));\n    }\n\n    if (tags && tags.length > 0) {\n      filteredDatasets = filteredDatasets.filter(\n        (dataset) =>\n          dataset.classification.domain_tags.filter((tag) => tags.includes(tag))\n            .length > 0,\n      );\n    }\n\n    if (categories && categories.length > 0) {\n      filteredDatasets = filteredDatasets.filter(\n        (dataset) =>\n          dataset.classification.categories.filter((cat) =>\n            categories.includes(cat),\n          ).length > 0,\n      );\n    }\n\n    if (departments && departments > 0) {\n      filteredDatasets = filteredDatasets.filter((dataset) =>\n        departments.includes(\n          dataset.classification.domain_metadata.find(\n            (d) => d.key === 'Dataset-Information_Agency',\n          )?.value,\n        ),\n      );\n    }\n    if (term && term.length > 0) {\n      filteredDatasets = filteredDatasets.filter((dataset) =>\n        dataset.resource.name.toLowerCase().includes(term.toLowerCase()),\n      );\n    }\n\n    return filteredDatasets;\n  }, [datasets, ids, tags, categories, departments, term]);\n}\n\nexport function useUniqueColumnEntries(dataset, column) {\n  const [uniqueEntries, setUniqueEntries] = useState(null);\n  useEffect(() => {\n    getUniqueEntries(dataset, column).then((res) => {\n      setUniqueEntries({\n        dataset: dataset.resource.id,\n        column,\n        distinct: res,\n      });\n    });\n  }, [dataset, column]);\n  return uniqueEntries;\n}\n","import React, { createContext, useContext, useReducer } from 'react';\n\nexport const CollectionsContext = createContext();\n\nconst initalState = {\n  datasets: [],\n  name: null,\n};\n\nconst reducer = (state, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case 'ADD_TO_COLLECTION':\n      return { ...state, datasets: [...state.datasets, payload] };\n    case 'REMOVE_FROM_COLLECTION':\n      return {\n        ...state,\n        datasets: state.datasets.filter((d) => d !== payload),\n      };\n    case 'SET_NAME':\n      return {\n        ...state,\n        name: payload,\n      };\n    case 'CLEAR_COLLECTION':\n      return {\n        ...state,\n        datasets: [],\n      };\n    default:\n      return state;\n  }\n};\n\nexport const CollectionsProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initalState);\n\n  return (\n    <CollectionsContext.Provider value={[state, dispatch]}>\n      {children}\n    </CollectionsContext.Provider>\n  );\n};\n\nexport const useCollectionsValue = () => useContext(CollectionsContext);\n","import { useCollectionsValue } from '../contexts/CollectionsContext';\n\nexport default function useCollection() {\n  const [state, dispatch] = useCollectionsValue();\n  const addToCollection = (datasetID) =>\n    dispatch({ type: 'ADD_TO_COLLECTION', payload: datasetID });\n  const removeFromCollection = (datasetID) =>\n    dispatch({ type: 'REMOVE_FROM_COLLECTION', payload: datasetID });\n  const setName = (name) => dispatch({ type: 'SET_NAME', payload: name });\n\n  const clearCollection = () => {\n    console.log('clearning');\n    dispatch({ type: 'CLEAR_COLLECTION' });\n  };\n\n  return [\n    state,\n    { clearCollection, addToCollection, removeFromCollection, setName },\n  ];\n}\n","import React from 'react';\nimport DOMPurify from 'dompurify';\n\n/* Simple component to sanitize HTML and display it.\n *  Need this for making sure we can display the\n *  dataset descriptions properly\n */\n\nexport default function RawHTML({ html, className }) {\n  const cleanedHTML = DOMPurify.sanitize(html);\n  return (\n    <div\n      className={className}\n      dangerouslySetInnerHTML={{ __html: cleanedHTML }}\n    />\n  );\n}\n","import React from 'react';\nimport './Dataset.scss';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons';\nimport { formatDate } from '../../utils/formatters';\nimport RawHTML from '../RawHTML/RawHTML';\n\nexport default function Dataset({\n  dataset,\n  onAddToCollection,\n  onRemoveFromCollection,\n  inCollection,\n  viewInOpenPortal = false,\n}) {\n  return (\n    <div className=\"dataset\" key={dataset.resource.id}>\n      <div className=\"dataset-title\">\n        <Link to={`/dataset/${dataset.resource.id}`}>\n          <h2>{dataset.resource.name}</h2>\n        </Link>\n        <p>{dataset.resource.attribution}</p>\n      </div>\n\n      {onAddToCollection && (\n        <button\n          type=\"button\"\n          onClick={() =>\n            inCollection\n              ? onRemoveFromCollection(dataset.resource.id)\n              : onAddToCollection(dataset.resource.id)\n          }\n        >\n          {inCollection ? 'Remove from collection' : 'Add to collection'}\n        </button>\n      )}\n      {viewInOpenPortal && (\n        <a\n          className=\"external-link\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={dataset.permalink}\n        >\n          <button type=\"button\">\n            View on Open Data&nbsp;\n            <FontAwesomeIcon icon={faExternalLinkAlt} />\n          </button>\n        </a>\n      )}\n\n      <div className=\"dataset-last-update\">\n        <p className=\"header\">Last Updated</p>\n        <p>{formatDate(dataset.resource.updatedAt)}</p>\n      </div>\n\n      <RawHTML\n        className=\"dataset-description\"\n        html={dataset.resource.description}\n      />\n      <div className=\"dataset-meta\">\n        <div className=\"update-frequency\">\n          <span>Update frequency:</span>\n          weekly\n        </div>\n        <div className=\"dataset-tags\">\n          <span>Tags:</span>\n          {dataset.classification.domain_tags.join(', ')}\n        </div>\n      </div>\n    </div>\n  );\n}\n","export function formatDate(date) {\n  const options = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  };\n  return new Date(date).toLocaleDateString('en-US', options);\n}\n","import React, { useState, useMemo, useEffect } from 'react';\nimport ReactPaginate from 'react-paginate';\n\nexport default function usePagination(data, perPage = 20) {\n  const pages = useMemo(() => Math.ceil(data.length / perPage), [\n    data,\n    perPage,\n  ]);\n  const [currentPageNo, setCurrentPageNo] = useState(0);\n\n  useEffect(() => {\n    setCurrentPageNo(0);\n  }, [data]);\n\n  const pageButtons = (\n    <nav>\n      <ReactPaginate\n        previousLabel=\"previous\"\n        nextLabel=\"next\"\n        breakLabel=\"...\"\n        breakClassName=\"break-me\"\n        pageCount={pages}\n        onPageChange={({ selected: page }) => {\n          setCurrentPageNo(page);\n        }}\n        containerClassName=\"pagination\"\n        subContainerClassName=\"pages pagination\"\n        activeClassName=\"active\"\n        previousClassName=\"page-item\"\n        nextClassName=\"page-item\"\n        pageClassName=\"page-item\"\n      />\n    </nav>\n  );\n\n  const content = useMemo(\n    () => data.slice(currentPageNo * perPage, (currentPageNo + 1) * perPage),\n    [perPage, currentPageNo, data],\n  );\n\n  return [\n    content,\n    {\n      pageButtons,\n    },\n  ];\n}\n","import React, { useState, useMemo } from 'react';\nimport usePagenation from '../../hooks/pagination';\nimport './MultiSelector.scss';\n\nexport default function MultiSelector({ items, selected, onChange, title }) {\n  const clearItems = () => {\n    onChange([]);\n  };\n\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const toggleItem = (item) => {\n    const newSelection = selected.includes(item)\n      ? selected.filter((i) => i !== item)\n      : [...selected, item];\n\n    onChange(newSelection);\n  };\n\n  const itemNames = useMemo(() => Object.keys(items), [items]);\n\n  const filteredItems = useMemo(\n    () =>\n      itemNames ? itemNames.filter((item) => item.includes(searchTerm)) : [],\n    [itemNames, searchTerm],\n  );\n\n  const [pagedItems, { pageButtons }] = usePagenation(filteredItems, 10);\n\n  return (\n    <div className=\"mutli-selector\">\n      <h2>{title}</h2>\n      <div className=\"search\">\n        <input\n          placeholder=\"filter\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n        />\n      </div>\n      <ul className=\"multi-list\">\n        {pagedItems.map((item) => (\n          /* eslint-disable */\n          <li\n            key={item}\n            onClick={() => toggleItem(item)}\n            className={`multi-buttons ${\n              selected && selected.includes(item) ? 'selected' : ''\n            }`}\n          >\n            <input\n              type=\"checkbox\"\n              checked={selected && selected.includes(item)}\n              className=\"checkbox\"\n            />\n            <span className=\"item-name\">{item}</span>\n            <span className=\"pill\">{items[item]}</span>\n          </li>\n          /* eslint-enable */\n        ))}\n      </ul>\n      {pageButtons}\n      {selected && selected.length > 0 && (\n        <button type=\"button\" onClick={clearItems}>\n          clear\n        </button>\n      )}\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport './HomePage.scss';\nimport {\n  useCategories,\n  useTags,\n  useDepartments,\n  useDatasets,\n} from '../../hooks/datasets';\nimport useCollection from '../../hooks/collections';\nimport Dataset from '../../components/Dataset/Dataset';\nimport usePagination from '../../hooks/pagination';\nimport MultiSelector from '../../components/MultiSelector/MultiSelector';\n\nexport default function HomePage() {\n  const categories = useCategories();\n  const tags = useTags();\n  const departments = useDepartments();\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [selectedCategories, setSelectedCategories] = useState([]);\n  const [selectedDepartments, setSelectedDepartments] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [\n    collection,\n    { addToCollection, removeFromCollection },\n  ] = useCollection();\n\n  const datasets = useDatasets({\n    tags: selectedTags,\n    categories: selectedCategories,\n    term: searchTerm,\n    departments: selectedDepartments,\n  });\n  const [pagedDatasets, { pageButtons }] = usePagination(datasets, 5);\n\n  return (\n    <div className=\"home-page\">\n      <div className=\"filters\">\n        <div className=\"categories\">\n          <MultiSelector\n            items={categories}\n            onChange={setSelectedCategories}\n            selected={selectedCategories}\n            title=\"Categories\"\n          />\n        </div>\n        <div className=\"tags\">\n          <MultiSelector\n            items={tags}\n            selected={selectedTags}\n            onChange={setSelectedTags}\n            title=\"Tags\"\n          />\n        </div>\n        <div className=\"departments\">\n          <MultiSelector\n            items={departments}\n            selected={selectedDepartments}\n            onChange={setSelectedDepartments}\n            title=\"Departments\"\n          />\n        </div>\n      </div>\n      <div className=\"datasets\">\n        <div className=\"search\">\n          <input\n            type=\"text\"\n            onChange={(e) => setSearchTerm(e.target.value)}\n            value={searchTerm}\n            placeholder=\"Search for dataset\"\n          />\n        </div>\n        <div className=\"count-and-sort\">\n          <p>\n            <span className=\"bold\">{datasets.length}</span> datasets\n          </p>\n          <p>\n            Sort by: <span className=\"bold\">Recently updated</span>\n          </p>\n        </div>\n\n        <ul className=\"dataset-list\">\n          {pagedDatasets.map((dataset) => (\n            <Dataset\n              key={dataset?.resource?.id}\n              dataset={dataset}\n              inCollection={collection.datasets.includes(dataset.resource.id)}\n              onAddToCollection={addToCollection}\n              onRemoveFromCollection={removeFromCollection}\n            />\n          ))}\n        </ul>\n        <div>{pageButtons}</div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useMemo } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFile } from '@fortawesome/free-regular-svg-icons';\nimport { Link } from 'react-router-dom';\nimport {\n  faAngleRight,\n  faAngleDown,\n  faTable,\n} from '@fortawesome/free-solid-svg-icons';\nimport { useUniqueColumnEntries } from '../../hooks/datasets';\nimport useCollection from '../../hooks/collections';\nimport './JoinColumn.scss';\n\nexport default function ColumnJoin({\n  rightDataset,\n  joinCol,\n  parentUniques,\n}) {\n  const [collapsed, setCollapsed] = useState(true);\n  const uniqueIds = useUniqueColumnEntries(rightDataset, joinCol);\n  const jointlyUnique = useMemo(\n    () =>\n      uniqueIds && parentUniques\n        ? parentUniques.filter((e) => uniqueIds.distinct.includes(e))\n        : [],\n    [uniqueIds, parentUniques],\n  );\n  const [\n    collection,\n    { addToCollection, removeFromCollection },\n  ] = useCollection();\n\n  return (\n    <div className=\"join-column\">\n      <div className=\"join-column-row\">\n        <span\n          onClick={() => setCollapsed(!collapsed)}\n          onKeyDown={(e) =>{  if (e.keycode === 32){ setCollapsed(!collapsed)} }}\n          className=\"join-column-name\"\n          role=\"button\"\n          tabIndex=\"0\"\n        >\n          <FontAwesomeIcon icon={collapsed ? faAngleRight : faAngleDown} />\n          <FontAwesomeIcon icon={faFile} />\n          {rightDataset.resource.name}\n        </span>\n        <span>\n          {jointlyUnique ? `${jointlyUnique.length} matching id's` : 'loading'} \n        </span>\n        <span>\n          <Link to={`/dataset/${rightDataset.resource.id}`}>View dataset</Link>\n        </span>\n        <button\n          type=\"button\"\n          onClick={() => {\n            collection.datasets.includes(rightDataset.resource.id)\n              ? removeFromCollection(rightDataset.resource.id)\n              : addToCollection(rightDataset.resource.id);\n          }}\n        >\n          {collection.datasets.includes(rightDataset.resource.id)\n            ? 'Remove dataset from collection'\n            : 'Add dataset to collection'}\n        </button>\n      </div>\n      {!collapsed && uniqueIds && (\n        <div className=\"join-column-unique\">\n          <h3>COMMON IDS</h3>\n          <ul>\n            {jointlyUnique.slice(0, 10).map((uid) => (\n              <li key={uid}>\n                <div className=\"bar\" />\n                <FontAwesomeIcon icon={faTable} />\n                <span>{uid}</span>\n              </li>\n            ))}\n          </ul>\n          <div>and {jointlyUnique.length - 10} more</div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAngleRight, faAngleDown } from '@fortawesome/free-solid-svg-icons';\nimport JoinColumn from '../JoinColumn/JoinColumn';\nimport './ColumnSuggestions.scss';\nimport usePagination from '../../hooks/pagination';\nimport { getUniqueEntries } from '../../utils/socrata';\n\nexport default function ColumnSuggestions({ column, joins, dataset }) {\n  const [columnUniques, setColumnsUniques] = useState([]);\n\n  const [collapsed, setCollapsed] = useState(true);\n  const dataTypeForCol =\n    dataset.resource.columns_datatype[\n      dataset.resource.columns_name.indexOf(column)\n    ];\n\n  const [pagedJoins, { pageButtons }] = usePagination(joins, 10);\n\n  useEffect(() => {\n    if (joins.length > 0) {\n      getUniqueEntries(dataset, column).then((res) => {\n        setColumnsUniques(res);\n      });\n    }\n  }, [column, dataset, joins]);\n\n  return (\n    <div className={`column-suggestions ${collapsed ? 'collapsed' : ''}`}>\n      <div\n        className=\"table-row\"\n        role=\"button\"\n        onKeydown={(e) => {\n          if (e.keyCode === 36) {\n            setCollapsed(!collapsed);\n          }\n        }}\n        onClick={() => setCollapsed(!collapsed)}\n        tabIndex=\"0\"\n      >\n        <span className=\"column-collapse\">\n          <FontAwesomeIcon icon={collapsed ? faAngleRight : faAngleDown} />{' '}\n          {column}\n        </span>\n        <span>{dataTypeForCol}</span>\n        <span>{joins.length} matching datasets</span>\n      </div>\n      {!collapsed && pagedJoins && (\n        <div className=\"columns-suggestions-matches\">\n          <h3>MATCHING DATSETS</h3>\n          {joins && (\n            <ul>\n              {pagedJoins.map((join) => (\n                <li key={join.dataset.resource.id}>\n                  <JoinColumn\n                    leftDataset={dataset}\n                    rightDataset={join.dataset}\n                    joinCol={column}\n                    parentUniques={columnUniques}\n                  />\n                </li>\n              ))}\n            </ul>\n          )}\n          {pageButtons}\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { useCallback, useMemo } from 'react';\nimport ColumnSuggestions from '../ColumnSuggestions/ColumnSuggestions';\nimport './ColumnMatchTable.scss';\n\nexport default function ColumnMatchTable({ dataset, joinColumns }) {\n  const columns = dataset.resource.columns_name;\n\n  const suggestionsForColumn = useCallback(\n    (col, candidates) =>\n      columns ? candidates.filter((c) => c.joinableColumns[0] === col) : [],\n    [columns],\n  );\n\n  const sortedColumns = useMemo(\n    () =>\n      joinColumns\n        ? columns.sort((a, b) =>\n            suggestionsForColumn(a, joinColumns).length <\n            suggestionsForColumn(b, joinColumns).length\n              ? 1\n              : -1,\n          )\n        : [],\n    [columns, joinColumns, suggestionsForColumn],\n  );\n\n  return (\n    <div className=\"column-match-table\">\n      <div className=\"table-header\">\n        <ul className=\"table-row\">\n          <li>Column name</li>\n          <li>Column type</li>\n          <li>No potential joins</li>\n        </ul>\n      </div>\n      {sortedColumns.map((column) => (\n        <ColumnSuggestions\n          dataset={dataset}\n          column={column}\n          joins={suggestionsForColumn(column, joinColumns)}\n        />\n      ))}\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport moment from 'moment';\nimport RawHTML from '../../components/RawHTML/RawHTML';\nimport ColumnMatchTable from '../../components/ColumnMatchTable/ColumnMatchTable';\nimport Dataset from '../../components/Dataset/Dataset';\nimport {\n  useDataset,\n  useDatasets,\n  useJoinableDatasets,\n} from '../../hooks/datasets';\nimport './DatasetPage.scss';\n\nconst formatDate = (date) => moment(date).format('MMMM DD, YYYY');\n\nexport default function DatasetPage({ match }) {\n  const { datasetID } = match.params;\n  const dataset = useDataset(datasetID);\n  const similarDatasets = useDatasets({});\n  const joins = useJoinableDatasets(dataset);\n  const [activeTab, setActiveTab] = useState('joins');\n  const resource = dataset?.resource;\n  const pageViews = resource?.page_views;\n  const classification = dataset?.classification;\n  const domainMetadata = classification?.domain_metadata;\n  const updatedAutomation = domainMetadata?.find(\n    ({ key, value }) => key === 'Update_Automation' && value === 'No',\n  )?.value;\n\n  const updateFrequency = domainMetadata?.find(\n    ({ key }) => key === 'Update_Update-Frequency',\n  )?.value;\n\n  const informationAgency = domainMetadata?.find(\n    ({ key }) => key === 'Dataset-Information_Agency',\n  )?.value;\n\n  return dataset ? (\n    <div className=\"dataset-page\">\n      <div className=\"dataset-details\">\n        <section>\n          <h2>{resource.name}</h2>\n          <p>{informationAgency}</p>\n          <RawHTML html={resource.description} />\n        </section>\n        <section className=\"external-link\">\n          <p>Powered by</p>\n          <img\n            alt=\"NYC Open Data\"\n            src=\"https://opendata.cityofnewyork.us/wp-content/themes/opendata-wp/assets/img/nyc-open-data-logo.svg\"\n          />\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href={dataset.permalink}>\n            View on Open Data\n          </a>\n        </section>\n        <section className=\"metadata\">\n          <h2>Metadata</h2>\n          <h3>Update Automation</h3>\n          <p>{updatedAutomation}</p>\n          <h3>Update Frequency</h3>\n          <p>{updateFrequency}</p>\n          <h3>Dataset Owner</h3>\n          <p>{dataset?.owner.display_name}</p>\n          {informationAgency && (\n            <>\n              <h3>Agency</h3>\n              <p>{informationAgency}</p>\n            </>\n          )}\n          {classification?.domain_category && (\n            <>\n              <h3>Category</h3>\n              <p>{classification.domain_category}</p>\n            </>\n          )}\n          <h3>Updated</h3>\n          <p>{formatDate(resource?.updatedAt)}</p>\n          <h3>Metadata Updated at</h3>\n          <p>{formatDate(resource?.metadata_updated_at)}</p>\n          <h3>Page Views</h3>\n          <p>{pageViews?.page_views_total}</p>\n        </section>\n      </div>\n      <div className=\"dataset-recomendataions\">\n        <h2>Other datasets to consider</h2>\n        <div className=\"tabs\">\n          <button\n            type=\"button\"\n            className={activeTab === 'joins' ? 'active' : ''}\n            onClick={() => setActiveTab('joins')}\n          >\n            Potential Join Columns\n          </button>\n          <button\n            type=\"button\"\n            className={activeTab === 'theme' ? 'active' : ''}\n            onClick={() => setActiveTab('theme')}\n          >\n            Thematically Similar\n          </button>\n        </div>\n        {activeTab === 'joins' && (\n          <>\n            <p>\n              Find datasets that share a column with the current dataset. These\n              columns might be interesting datasets to join with the current\n              dataset to add additional details or bring in context\n            </p>\n            <ColumnMatchTable dataset={dataset} joinColumns={joins} />\n          </>\n        )}\n        {activeTab === 'theme' && (\n          <>\n            <p>\n              Dataset that are thematically similar based on name and\n              description\n            </p>\n            {similarDatasets.slice(0, 10).map((d) => (\n              <Dataset dataset={d} />\n            ))}\n          </>\n        )}\n      </div>\n    </div>\n  ) : (\n    <h1>Loading...</h1>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport useCollection from '../../hooks/collections';\nimport './CollectionBar.scss';\n\nexport default function CollectionContext() {\n  const [collection, { clearCollection }] = useCollection();\n  if (collection.datasets && collection.datasets.length > 0) {\n    return (\n      <div className=\"collection-bar\">\n        <span>{collection.datasets.length} datasets selected</span>\n        <Link to=\"/collection/new\">\n          <button type=\"submit\">Create Collection</button>\n        </Link>\n        <button type=\"button\" onClick={clearCollection}>\n          Clear\n        </button>\n      </div>\n    );\n  }\n  return null;\n}\n","import { useState } from 'react';\n\nconst copyToClipboard = async (text) => {\n  if (navigator.clipboard) {\n    try {\n      await navigator.clipboard.writeText(text);\n      return true;\n    } catch (e) {\n      // Suppress error and try fallback method\n    }\n  }\n\n  if (\n    document.queryCommandSupported &&\n    document.queryCommandSupported('copy')\n  ) {\n    const textarea = document.createElement('textarea');\n    textarea.style.opacity = '0';\n    textarea.textContent = text;\n    // Prevent scrolling to bottom of page\n    textarea.style.position = 'fixed';\n    document.body.appendChild(textarea);\n    textarea.select();\n    try {\n      return document.execCommand('copy');\n    } catch (e) {\n      // Security exception may be thrown by some browsers.\n      return false;\n    } finally {\n      document.body.removeChild(textarea);\n    }\n  }\n  return false;\n};\n\nexport default (url) => {\n  const [isCopied, setIsCopied] = useState(false);\n\n  const setCopied = async () => {\n    await copyToClipboard(url);\n    setIsCopied(true);\n  };\n  return [isCopied, setCopied];\n};\n","import React from 'react';\nimport './CollectionPage.scss';\nimport {\n  EmailShareButton,\n  FacebookShareButton,\n  TwitterShareButton,\n  EmailIcon,\n  FacebookIcon,\n  TwitterIcon,\n} from 'react-share';\nimport useClipboard from '../../hooks/useClipboard';\nimport { useDatasets } from '../../hooks/datasets';\nimport Dataset from '../../components/Dataset/Dataset';\n\nexport default function CollectionPage({ match }) {\n  const { name, datasetIDs } = match.params;\n  const url = window.location.href;\n  const datasets = useDatasets({ ids: datasetIDs.split(',') });\n\n  const [isCopied, setCopied] = useClipboard(url);\n  return (\n    <div className=\"collections-page\">\n      <div className=\"collections-details\">\n        <h2>{name}</h2>\n        <p>\n          {datasets.length} dataset{datasets.length > 1 ? 's' : ''}\n        </p>\n\n        <div>\n          <h3>Share this collection:</h3>\n          <p>{url} </p>\n          <button type=\"button\" onClick={setCopied}>\n            Copy link\n          </button>\n          <span>{isCopied ? 'Copied!' : ' '} </span>\n          <p className=\"share-icons\">\n            <FacebookShareButton url={url}>\n              <FacebookIcon size={36} />\n            </FacebookShareButton>{' '}\n            <TwitterShareButton url={url}>\n              <TwitterIcon size={36} />\n            </TwitterShareButton>\n            <EmailShareButton url={url}>\n              <EmailIcon size={36} />\n            </EmailShareButton>\n          </p>\n        </div>\n      </div>\n      <div className=\"collections-content\">\n        {datasets.map((dataset) => (\n          <Dataset viewInOpenPortal key={dataset.id} dataset={dataset} />\n        ))}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport useCollection from '../../hooks/collections';\nimport { useDatasets } from '../../hooks/datasets';\nimport './CreateCollectionModal.scss';\n\nexport default function CreateCollectionModal({ history }) {\n  const [collection, { setName }] = useCollection();\n  const datasets = useDatasets({ ids: collection.datasets });\n\n  const createCollection = (newCollection) => {\n    const collectionURL = `/collection/${\n      newCollection.name\n    }/${newCollection.datasets.join(',')}`;\n    history.push(collectionURL);\n  };\n\n  return (\n    <div className=\"create-collection-modal\">\n      <h3>Create collection with the following datasets</h3>\n      <ul>\n        {datasets.map((dataset) => (\n          <li>{dataset.resource.name}</li>\n        ))}\n      </ul>\n      <input\n        type=\"text\"\n        placeholder=\"Name\"\n        value={collection.name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <button type=\"submit\" onClick={() => createCollection(collection)}>\n        Create\n      </button>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.scss';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\nimport { ModalContainer, ModalRoute } from 'react-router-modal';\nimport HomePage from './layout/HomePage/HomePage';\nimport DatasetPage from './layout/DatasetPage/DatasetPage';\nimport CollectionBar from './components/CollectionBar/CollectionBar';\nimport CollectionPage from './layout/CollectionPage/CollectionPage';\nimport CreateCollectionModal from './components/CreateCollectionModal/CreateCollectionModal';\n\nimport 'react-router-modal/css/react-router-modal.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <a href=\"/\">\n          <h1>Data Clinic</h1>\n        </a>\n      </header>\n      <ModalContainer />\n      <div className=\"content\">\n        <Router basename={process.env.PUBLIC_URL}>\n          <Switch>\n            <Route path=\"/\" exact component={HomePage} />\n            <Route path=\"/dataset/:datasetID\" exact component={DatasetPage} />\n            <Route\n              path=\"/collection/:name/:datasetIDs\"\n              exact\n              component={CollectionPage}\n            />\n\n            <ModalRoute\n              path=\"/collection/new\"\n              parentPath=\"/\"\n              component={CreateCollectionModal}\n            />\n            <Redirect from=\"/\" to=\"/\" />\n          </Switch>\n          <CollectionBar />\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'normalize.css'; // Ensure consistent layout across browsers\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider } from './contexts/OpenDataContext';\nimport { CollectionsProvider } from './contexts/CollectionsContext';\n\nReactDOM.render(\n  <StateProvider>\n    <CollectionsProvider>\n      <App />\n    </CollectionsProvider>\n  </StateProvider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}