{"version":3,"sources":["utils/socrata.js","contexts/OpenDataContext.jsx","hooks/datasets.js","contexts/CollectionsContext.jsx","hooks/collections.js","components/CategorySelector/CategorySelector.jsx","components/RawHTML/RawHTML.jsx","components/Dataset/Dataset.jsx","components/TagSelector/TagSelector.jsx","layout/HomePage/HomePage.jsx","hooks/pagination.jsx","layout/DatasetPage/DatasetPage.jsx","layout/CollectionPage/CollectionPage.jsx","components/CreateCollectionModal/CreateCollectionModal.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["SOCRATA_NY_OPENDATA_ENDPOINT","getMaifestPage","pageNo","a","async","limit","fetch","then","r","json","matachableColumnsForDataset","dataset","Set","resource","columns_name","columns_field_name","hasJoinableMatch","columns","candidate","candidateCols","intersection","filter","x","has","Array","from","db","Dexie","version","stores","SocrataCache","AppContext","createContext","initalState","datasets","tagList","categories","stateLoaded","reducer","state","action","type","payload","useStateValue","useContext","useJoinableDatasets","console","log","useMemo","cols","map","joinableColumns","match","length","id","findJoinable","useDatasets","tags","term","ids","filteredDatasets","d","includes","classification","domain_tags","tag","cat","name","toLowerCase","CollectionsContext","useCollection","dispatch","addToCollection","datasetID","removeFromCollection","setName","CategorySelector","selected","onChange","className","key","onClick","newSelection","c","toggleCategory","RawHTML","html","cleanedHTML","DOMPurify","sanitize","dangerouslySetInnerHTML","__html","Dataset","onAddToCollection","onRemoveFromCollection","inCollection","to","description","join","TagSelector","t","toggleTag","HomePage","useCategories","useTags","useState","selectedTags","setSelectedTags","selectedCategories","setSelectedCategories","searchTerm","setSearchTerm","collection","data","perPage","items","currentPageNo","setCurrentPageNo","useEffect","pages","Math","ceil","pageButtons","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","onPageChange","page","containerClassName","subContainerClassName","activeClassName","content","slice","usePagination","pagedDatasets","e","target","value","placeholder","formatDate","date","moment","format","DatasetPage","find","useDataset","params","joins","pageViews","page_views","domainMetadata","domain_metadata","updatedAutomation","updateFrequency","informationAgency","Container","fluid","Row","Col","updatedAt","metadata_updated_at","createdAt","page_views_total","download_count","owner","display_name","index","columns_datatype","Table","striped","borderless","publication_date","domain_category","upperFirst","category","style","overflowY","j","i","CollectionPage","datasetIDs","url","window","location","href","split","useCopyClipboard","isCopied","setCopied","FacebookShareButton","FacebookIcon","TwitterShareButton","TwitterIcon","EmailShareButton","EmailIcon","CreateCollectionModal","history","newCollection","collectionURL","push","createCollection","App","basename","process","path","exact","component","parentPath","Boolean","hostname","ReactDOM","render","children","useReducer","get","result","cachedState","JSON","parse","cache_loaded","firstPage","totalEntries","resultSetSize","Promise","all","_","resp","results","list","reduce","datasetPage","allDatasets","getManifest","manifest","getTagList","cats","getCategories","put","stringify","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a08d7cb9.chunk.js","sourcesContent":["const SOCRATA_NY_OPENDATA_ENDPOINT =\n  'https://api.us.socrata.com/api/catalog/v1?domains=data.cityofnewyork.us&search_context=data.cityofnewyork.us';\n\nasync function getMaifestPage(pageNo, limit = 100) {\n  return fetch(\n    `${SOCRATA_NY_OPENDATA_ENDPOINT}&offset=${pageNo * limit}&limit=${limit}`\n  ).then(r => r.json());\n}\n\nfunction matachableColumnsForDataset(dataset) {\n  return new Set([\n    ...dataset.resource.columns_name,\n    ...dataset.resource.columns_field_name\n  ]);\n}\n\nfunction hasJoinableMatch(columns, candidate) {\n  const candidateCols = matachableColumnsForDataset(candidate);\n  const intersection = new Set([...columns].filter(x => candidateCols.has(x)));\n  return Array.from(intersection);\n}\n\nexport function findJoinable(dataset, datasets) {\n  const cols = matachableColumnsForDataset(dataset);\n  const matches = datasets\n    .map(candidate => ({\n      dataset: candidate,\n      joinableColumns: hasJoinableMatch(cols, candidate)\n    }))\n    .filter(\n      match =>\n        match.joinableColumns.length > 0 &&\n        match.dataset.resource.id !== dataset.resource.id\n    );\n  return matches;\n}\n\n/**\n * Get the full manifest from Socrata. This should be cached locally and updated in a smart way.\n *\n * @return {Promise(Array)} a promise that resolves to an array of the datasets\n */\nexport async function getManifest() {\n  const firstPage = await getMaifestPage(0, 1);\n  const totalEntries = firstPage.resultSetSize;\n  const pages = Math.ceil(totalEntries / 100);\n  return Promise.all(\n    [...Array(pages)].map((_, i) =>\n      getMaifestPage(i).then(resp => resp.results)\n    )\n  ).then(list =>\n    list.reduce(\n      (datasetPage, allDatasets) => [...allDatasets, ...datasetPage],\n      []\n    )\n  );\n}\n\n/**\n * Extract from the datasets array, a unique set of categories.\n * @return {Array<string>} an array of unique categories\n */\nexport function getCategories(datasets) {\n  const categories = datasets.reduce(\n    (cats, dataset) => [\n      ...cats,\n      ...(dataset.classification.categories\n        ? dataset.classification.categories\n        : [])\n    ],\n    []\n  );\n  const unique = Array.from(new Set(categories));\n  return unique;\n}\n\n/**\n * Extract from the datasets array, a unique set of tags.\n * @return {Array<string>} an array of unique tags\n */\nexport function getTagList(datasets) {\n  const tagList = datasets.reduce(\n    (tags, dataset) => [\n      ...tags,\n      ...(dataset.classification.domain_tags\n        ? dataset.classification.domain_tags\n        : [])\n    ],\n    []\n  );\n  return Array.from(new Set(tagList));\n}\n","import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport Dexie from 'dexie';\nimport { getManifest, getCategories, getTagList } from '../utils/socrata';\n\nconst db = new Dexie('SocrataCache');\ndb.version(1).stores({\n  SocrataCache: 'id',\n});\n\nexport const AppContext = createContext();\n\nconst initalState = {\n  datasets: [],\n  tagList: [],\n  categories: [],\n  stateLoaded: false,\n};\n\nconst reducer = (state, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case 'UPDATE_OPEN_DATASET_MANIFEST':\n      return { ...state, datasets: payload };\n    case 'UPDATE_TAGS':\n      return { ...state, tagList: payload };\n    case 'UPDATE_CATEGORIES':\n      return { ...state, categories: payload };\n    case 'HYDRATE_STATE':\n      return { ...state, ...payload };\n    case 'SET_LOADED':\n      return { ...state, stateLoaded: true };\n    default:\n      return state;\n  }\n};\n\nexport const StateProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initalState);\n\n  // Try to get the state locally from indexed db... if we can't find it there, request it from the\n  // socrata API\n\n  useEffect(() => {\n    db.SocrataCache.get(1).then((result) => {\n      if (result) {\n        const cachedState = JSON.parse(result.data);\n        dispatch({\n          type: 'HYDRATE_STATE',\n          payload: { ...initalState, ...cachedState, cache_loaded: true },\n        });\n      } else {\n        getManifest().then((manifest) => {\n          const tagList = getTagList(manifest);\n          const categories = getCategories(manifest);\n          dispatch({\n            type: 'UPDATE_OPEN_DATASET_MANIFEST',\n            payload: manifest,\n          });\n          dispatch({\n            type: 'UPDATE_TAGS',\n            payload: tagList,\n          });\n          dispatch({\n            type: 'UPDATE_CATEGORIES',\n            payload: categories,\n          });\n          dispatch({\n            type: 'SET_LOADED',\n          });\n        });\n      }\n    });\n  }, []);\n\n  // If our datasets change, update the cahced version\n  const { datasets, tagList, categories, stateLoaded } = state;\n  useEffect(() => {\n    if (stateLoaded) {\n      db.SocrataCache.put({\n        data: JSON.stringify({\n          datasets,\n          tagList,\n          categories,\n        }),\n        id: 1,\n      });\n    }\n  }, [datasets, tagList, categories, stateLoaded]);\n\n  return (\n    <AppContext.Provider value={[state, dispatch]}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport const useStateValue = () => useContext(AppContext);\n","import { useMemo } from 'react';\nimport { useStateValue } from '../contexts/OpenDataContext';\nimport { findJoinable } from '../utils/socrata';\n\nexport function useTags() {\n  const [{ tagList }] = useStateValue();\n  return tagList;\n}\n\nexport function useCategories() {\n  const [{ categories }] = useStateValue();\n  return categories;\n}\n\nexport function useJoinableDatasets(dataset) {\n  const [{ datasets }] = useStateValue();\n  console.log(dataset);\n  return useMemo(() => (dataset ? findJoinable(dataset, datasets) : []), [\n    dataset,\n    datasets,\n  ]);\n}\n\nexport function useDataset(datasetID) {\n  const [{ datasets }] = useStateValue();\n  return datasets.find((d) => d.resource.id === datasetID);\n}\n\nexport function useDatasets({ tags, term, categories, ids }) {\n  const [{ datasets }] = useStateValue();\n\n  return useMemo(() => {\n    let filteredDatasets = [...datasets];\n\n    if (ids) {\n      return filteredDatasets.filter((d) => ids.includes(d.resource.id));\n    }\n\n    if (tags && tags.length > 0) {\n      console.log('applting');\n      filteredDatasets = filteredDatasets.filter(\n        (dataset) =>\n          dataset.classification.domain_tags.filter((tag) => tags.includes(tag))\n            .length > 0,\n      );\n    }\n\n    if (categories && categories.length > 0) {\n      filteredDatasets = filteredDatasets.filter(\n        (dataset) =>\n          dataset.classification.categories.filter((cat) =>\n            categories.includes(cat),\n          ).length > 0,\n      );\n    }\n\n    if (term && term.length > 0) {\n      filteredDatasets = filteredDatasets.filter((dataset) =>\n        dataset.resource.name.toLowerCase().includes(term.toLowerCase()),\n      );\n    }\n\n    console.log('after term ', filteredDatasets.length);\n    console.log('return size ', filteredDatasets.length);\n    return filteredDatasets;\n  }, [datasets, ids, tags, categories, term]);\n}\n","import React, { createContext, useContext, useReducer } from 'react';\n\nexport const CollectionsContext = createContext();\n\nconst initalState = {\n  datasets: [],\n  name: null,\n};\n\nconst reducer = (state, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case 'ADD_TO_COLLECTION':\n      return { ...state, datasets: [...state.datasets, payload] };\n    case 'REMOVE_FROM_COLLECTION':\n      return {\n        ...state,\n        datasets: state.datasets.filter((d) => d !== payload),\n      };\n    case 'SET_NAME':\n      return {\n        ...state,\n        name: payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const CollectionsProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initalState);\n\n  return (\n    <CollectionsContext.Provider value={[state, dispatch]}>\n      {children}\n    </CollectionsContext.Provider>\n  );\n};\n\nexport const useCollectionsValue = () => useContext(CollectionsContext);\n","import { useCollectionsValue } from '../contexts/CollectionsContext';\n\nexport default function useCollection() {\n  const [state, dispatch] = useCollectionsValue();\n  const addToCollection = (datasetID) =>\n    dispatch({ type: 'ADD_TO_COLLECTION', payload: datasetID });\n  const removeFromCollection = (datasetID) =>\n    dispatch({ type: 'REMOVE_FROM_COLLECTION', payload: datasetID });\n  const setName = (name) => dispatch({ type: 'SET_NAME', payload: name });\n  return [state, { addToCollection, removeFromCollection, setName }];\n}\n","import React from 'react';\nimport './CategorySelector.scss';\n\nexport default function CategorySelector({ categories, selected, onChange }) {\n  const clearCategories = () => {\n    onChange([]);\n  };\n\n  const toggleCategory = (cat) => {\n    const newSelection = selected.includes(cat)\n      ? selected.filter((c) => c !== cat)\n      : [...selected, cat];\n\n    onChange(newSelection);\n  };\n\n  return (\n    <div className=\"category-selector\">\n      <h2>Categories</h2>\n      <ul className=\"category-list\">\n        {categories.map((cat) => (\n          /* eslint-disable */\n          <li\n            key={cat}\n            onClick={() => toggleCategory(cat)}\n            className={`category-buttons ${\n              selected && selected.includes(cat) ? 'selected' : ''\n            }`}\n          >\n            {cat}\n          </li>\n          /* eslint-enable */\n        ))}\n      </ul>\n      {selected && selected.length > 0 && (\n        <button type=\"button\" onClick={clearCategories}>\n          clear\n        </button>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport DOMPurify from 'dompurify';\n\n/* Simple component to sanitize HTML and display it.\n *  Need this for making sure we can display the\n *  dataset descriptions properly\n */\n\nexport default function RawHTML({ html, className }) {\n  const cleanedHTML = DOMPurify.sanitize(html);\n  return (\n    <div\n      className={className}\n      dangerouslySetInnerHTML={{ __html: cleanedHTML }}\n    />\n  );\n}\n","import React from 'react';\nimport './Dataset.scss';\nimport { Link } from 'react-router-dom';\nimport RawHTML from '../RawHTML/RawHTML';\n\nexport default function Dataset({\n  dataset,\n  onAddToCollection,\n  onRemoveFromCollection,\n  inCollection,\n}) {\n  console.log(inCollection);\n  return (\n    <div className=\"dataset\" key={dataset.resource.id}>\n      <h4 className=\"dataset-title\">\n        <Link to={`/dataset/${dataset.resource.id}`}>\n          {dataset.resource.name}\n        </Link>\n        {onAddToCollection && (\n          <button\n            type=\"button\"\n            onClick={() =>\n              inCollection\n                ? onRemoveFromCollection(dataset.resource.id)\n                : onAddToCollection(dataset.resource.id)\n            }\n          >\n            {inCollection ? 'Remove from collection' : 'Add to collection'}\n          </button>\n        )}\n      </h4>\n      <RawHTML\n        className=\"dataset-description\"\n        html={dataset.resource.description}\n      />\n      <p className=\"dataset-tags\">\n        {dataset.classification.domain_tags.join(', ')}\n      </p>\n    </div>\n  );\n}\n","import React from 'react';\nimport './TagSelector.scss';\n\nexport default function TagSelector({ tags, selected, onChange }) {\n  const clearTags = () => {\n    onChange([]);\n  };\n\n  const toggleTag = (tag) => {\n    console.log('old tags ', selected);\n    const newSelection = selected.includes(tag)\n      ? selected.filter((t) => t !== tag)\n      : [...selected, tag];\n\n    console.log('new tags ', newSelection);\n    onChange(newSelection);\n  };\n\n  return (\n    <div className=\"tag-selector\">\n      <h2>Tags</h2>\n      {tags && (\n        <ul className=\"tag-list\">\n          {tags.map((tag) => (\n            /* eslint-disable */\n            <li\n              className={selected.includes(tag) ? 'selected' : ''}\n              onClick={() => toggleTag(tag)}\n              key={tag}\n            >\n              {tag}\n            </li>\n            /* eslint-enable */\n          ))}\n        </ul>\n      )}\n      {selected.length > 0 && (\n        <button type=\"button\" onClick={clearTags}>\n          clear\n        </button>\n      )}\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport './HomePage.scss';\nimport { useCategories, useTags, useDatasets } from '../../hooks/datasets';\nimport useCollection from '../../hooks/collections';\nimport CategorySelector from '../../components/CategorySelector/CategorySelector';\nimport Dataset from '../../components/Dataset/Dataset';\nimport usePagination from '../../hooks/pagination';\nimport TagSelector from '../../components/TagSelector/TagSelector';\n\nexport default function HomePage() {\n  const categories = useCategories();\n  const tags = useTags();\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [selectedCategories, setSelectedCategories] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [\n    collection,\n    { addToCollection, removeFromCollection },\n  ] = useCollection();\n\n  const datasets = useDatasets({\n    tags: selectedTags,\n    categories: selectedCategories,\n    term: searchTerm,\n  });\n  const [pagedDatasets, { pageButtons }] = usePagination(datasets);\n\n  return (\n    <div className=\"home-page\">\n      <div className=\"categories\">\n        <CategorySelector\n          categories={categories}\n          onChange={setSelectedCategories}\n          selected={selectedCategories}\n        />\n      </div>\n\n      <div className=\"tags\">\n        <TagSelector\n          tags={tags}\n          selected={selectedTags}\n          onChange={setSelectedTags}\n        />\n      </div>\n      <div className=\"datasets\">\n        <h2>\n          Datasets ({pagedDatasets.length} / {datasets.length} )\n        </h2>\n        <div className=\"search\">\n          <input\n            type=\"text\"\n            onChange={(e) => setSearchTerm(e.target.value)}\n            value={searchTerm}\n            placeholder=\"search\"\n          />\n          {collection.datasets.length > 0 && (\n            <Link to=\"/collection/new\">\n              Create Collection ({collection.datasets.length})\n            </Link>\n          )}\n        </div>\n        <ul className=\"dataset-list\">\n          {pagedDatasets.map((dataset) => (\n            <Dataset\n              dataset={dataset}\n              inCollection={collection.datasets.includes(dataset.resource.id)}\n              onAddToCollection={addToCollection}\n              onRemoveFromCollection={removeFromCollection}\n            />\n          ))}\n        </ul>\n        <div>{pageButtons}</div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useMemo, useEffect } from 'react';\nimport ReactPaginate from 'react-paginate';\n\nexport default function usePagination(data, perPage = 20) {\n  const items = useMemo(() => data.length, [data]);\n  const [currentPageNo, setCurrentPageNo] = useState(0);\n\n  useEffect(() => {\n    setCurrentPageNo(0);\n  }, [data]);\n\n  const pages = Math.ceil(items / perPage);\n\n  const pageButtons = (\n    <ReactPaginate\n      previousLabel=\"previous\"\n      nextLabel=\"next\"\n      breakLabel=\"...\"\n      breakClassName=\"break-me\"\n      pageCount={pages.length}\n      onPageChange={({ selected: page }) => {\n        setCurrentPageNo(page);\n      }}\n      containerClassName=\"pagination\"\n      subContainerClassName=\"pages pagination\"\n      activeClassName=\"active\"\n    />\n  );\n\n  const content = useMemo(\n    () => data.slice(currentPageNo * perPage, (currentPageNo + 1) * perPage),\n    [perPage, currentPageNo, data],\n  );\n\n  return [\n    content,\n    {\n      pageButtons,\n    },\n  ];\n}\n","import React from 'react';\nimport moment from 'moment';\nimport upperFirst from 'lodash/upperFirst';\nimport Table from 'react-bootstrap/Table';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport { Link } from 'react-router-dom';\nimport RawHTML from '../../components/RawHTML/RawHTML';\nimport { useDataset, useJoinableDatasets } from '../../hooks/datasets';\nimport './DatasetPage.scss';\n\nconst formatDate = (date) => moment(date).format('MMMM DD, YYYY');\n\nexport default function DatasetPage({ match }) {\n  const { datasetID } = match.params;\n  const dataset = useDataset(datasetID);\n  const joins = useJoinableDatasets(dataset);\n  const resource = dataset?.resource;\n  const pageViews = resource?.page_views;\n  const classification = dataset?.classification;\n  const domainMetadata = classification?.domain_metadata;\n  const updatedAutomation = domainMetadata?.find(\n    ({ key, value }) => key === 'Update_Automation' && value === 'No',\n  )?.value;\n  const updateFrequency = domainMetadata?.find(\n    ({ key }) => key === 'Update_Update-Frequency',\n  )?.value;\n\n  const informationAgency = domainMetadata?.find(\n    ({ key }) => key === 'Dataset-Information_Agency',\n  )?.value;\n  return (\n    <Container fluid className=\"dataset-page\">\n      {dataset ? (\n        <Container fluid>\n          <Row fluid className=\"dataset-header\">\n            <h1>Dataset: {resource?.name}</h1>\n            <Col>\n              <RawHTML\n                className=\"dataset-description\"\n                html={resource?.description}\n              />\n            </Col>\n          </Row>\n          <Row fluid>\n            <Col fluid>\n              <Row fluid>\n                <Container fluid>\n                  <Row fluid>\n                    <Col>\n                      <dt>Updated</dt>\n                      <dd>{formatDate(resource?.updatedAt)}</dd>\n                    </Col>\n                  </Row>\n                  <Row fluid>\n                    <Col>\n                      <dt>Data Last Updated</dt>\n                      <dd>{formatDate(resource?.updatedAt)}</dd>\n                    </Col>\n                    <Col>\n                      <dt>Metadata Last Updated</dt>\n                      <dd>{formatDate(resource?.metadata_updated_at)}</dd>\n                    </Col>\n                  </Row>\n                  <Row fluid>\n                    <Col>\n                      <dt>Date Created</dt>\n                      <dd>{formatDate(resource?.createdAt)}</dd>\n                    </Col>\n                  </Row>\n                </Container>\n              </Row>\n              <Row fluid>\n                {pageViews?.page_views_total ? (\n                  <Col>\n                    <dt>Views</dt>\n                    <dd>{pageViews?.page_views_total}</dd>\n                  </Col>\n                ) : null}\n                {dataset?.resource?.download_count ? (\n                  <Col>\n                    <dt>Downloads</dt>\n                    <dd>{dataset?.resource?.download_count}</dd>\n                  </Col>\n                ) : null}\n              </Row>\n              <Row fluid>\n                <Col>\n                  <dt>Dataset Owner</dt>\n                  <dd>{dataset?.owner?.display_name}</dd>\n                </Col>\n                <Col>\n                  <dt>Columns</dt>\n                  <dd>\n                    <ul>\n                      {dataset?.resource?.columns_name?.map((name, index) => (\n                        <li key={index}>\n                          {name} : {dataset?.resource?.columns_datatype[index]}\n                        </li>\n                      ))}\n                    </ul>\n                  </dd>\n                </Col>\n              </Row>\n            </Col>\n            <Col>\n              <Row>\n                <h3>Update Information</h3>\n                <Table striped borderless>\n                  <tbody>\n                    {updateFrequency ? (\n                      <tr>\n                        <td>Update Frequency</td>\n                        <td>\n                          <span>{updateFrequency}</span>\n                        </td>\n                      </tr>\n                    ) : null}\n                    <tr>\n                      <td>Automation</td>\n                      <td>\n                        <span>\n                          {updatedAutomation !== 'Yes' ? 'No' : 'Yes'}\n                        </span>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>Date Made Public</td>\n                      <td>\n                        <span>\n                          {formatDate(dataset?.resource?.publication_date)}\n                        </span>\n                      </td>\n                    </tr>\n                  </tbody>\n                </Table>\n              </Row>\n              <Row>\n                <h3>Dataset Information</h3>\n                <Table striped borderless>\n                  <tbody>\n                    {informationAgency ? (\n                      <tr>\n                        <td>Agency</td>\n                        <td>\n                          <span>{informationAgency}</span>\n                        </td>\n                      </tr>\n                    ) : null}\n                  </tbody>\n                </Table>\n              </Row>\n              <Row>\n                <h3>Topics</h3>\n                <Table striped borderless>\n                  <tbody>\n                    <tr>\n                      <td>Category</td>\n                      <td>\n                        {classification?.domain_category ? (\n                          upperFirst(classification?.domain_category)\n                        ) : (\n                          <span className=\"italics\">\n                            This dataset does not have a category\n                          </span>\n                        )}\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>Tags</td>\n                      <td>\n                        {classification?.domain_tags?.length ? (\n                          classification?.domain_tags\n                            ?.map((category) => upperFirst(category))\n                            .join(', ')\n                        ) : (\n                          <span className=\"italics\">\n                            This dataset does not have any tags\n                          </span>\n                        )}\n                      </td>\n                    </tr>\n                  </tbody>\n                </Table>\n              </Row>\n              <Row fluid>\n                <div className=\"dataset-joins\">\n                  <h3>Can be joined with</h3>\n                  <ul style={{ overflowY: 'auto' }}>\n                    {joins.map((j, i) => (\n                      <li key={i}>\n                        <p>\n                          <Link to={`/dataset/${j.resource?.id}`}>\n                            {j.resource?.name}{' '}\n                          </Link>{' '}\n                          on :\n                        </p>\n                        <p> {j.joinableColumns.join(', ')}</p>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </Row>\n            </Col>\n          </Row>\n        </Container>\n      ) : (\n        <h1>Loading...</h1>\n      )}\n    </Container>\n  );\n}\n","import React from 'react';\nimport { useCopyClipboard } from '@lokibai/react-use-copy-clipboard';\nimport './CollectionPage.scss';\n\nimport {\n  EmailShareButton,\n  FacebookShareButton,\n  TwitterShareButton,\n  EmailIcon,\n  FacebookIcon,\n  TwitterIcon,\n} from 'react-share';\nimport { useDatasets } from '../../hooks/datasets';\nimport Dataset from '../../components/Dataset/Dataset';\n\nexport default function CollectionPage({ match }) {\n  const { name, datasetIDs } = match.params;\n  const url = window.location.href;\n  const datasets = useDatasets({ ids: datasetIDs.split(',') });\n\n  const [isCopied, setCopied] = useCopyClipboard(`${url}`);\n  return (\n    <div className=\"collections-page\">\n      <h1>{name}</h1>\n      {datasets.map((dataset) => (\n        <Dataset dataset={dataset} />\n      ))}\n      <div className=\"share\">\n        Share this collection:\n        <p>\n          <FacebookShareButton url={url}>\n            <FacebookIcon />\n          </FacebookShareButton>{' '}\n          <TwitterShareButton url={url}>\n            <TwitterIcon />\n          </TwitterShareButton>\n          <EmailShareButton url={url}>\n            <EmailIcon />\n          </EmailShareButton>\n        </p>\n        <p>\n          Share link {url}{' '}\n          <button type=\"button\" onClick={setCopied}>\n            {' '}\n            {isCopied ? 'Copied' : 'Copy'}{' '}\n          </button>\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport useCollection from '../../hooks/collections';\nimport { useDatasets } from '../../hooks/datasets';\nimport './CreateCollectionModal.scss';\n\nexport default function CreateCollectionModal({ history }) {\n  const [collection, { setName }] = useCollection();\n  const datasets = useDatasets({ ids: collection.datasets });\n\n  const createCollection = (newCollection) => {\n    const collectionURL = `/collection/${\n      newCollection.name\n    }/${newCollection.datasets.join(',')}`;\n    history.push(collectionURL);\n  };\n\n  return (\n    <div className=\"create-collection-modal\">\n      <h3>Create collection with the following datasets</h3>\n      <ul>\n        {datasets.map((dataset) => (\n          <li>{dataset.resource.name}</li>\n        ))}\n      </ul>\n      <input\n        type=\"text\"\n        placeholder=\"Name\"\n        value={collection.name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <button type=\"submit\" onClick={() => createCollection(collection)}>\n        Create\n      </button>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.scss';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { ModalContainer, ModalRoute } from 'react-router-modal';\nimport HomePage from './layout/HomePage/HomePage';\nimport DatasetPage from './layout/DatasetPage/DatasetPage';\nimport CollectionPage from './layout/CollectionPage/CollectionPage';\nimport CreateCollectionModal from './components/CreateCollectionModal/CreateCollectionModal';\n\nimport 'react-router-modal/css/react-router-modal.css';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <Route path=\"/\" exact component={HomePage} />\n        <Route path=\"/dataset/:datasetID\" exact component={DatasetPage} />\n        <Route\n          path=\"/collection/:name/:datasetIDs\"\n          exact\n          component={CollectionPage}\n        />\n        <ModalRoute\n          path=\"/collection/new\"\n          parentPath=\"/\"\n          component={CreateCollectionModal}\n        />\n      </div>\n\n      <ModalContainer />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'normalize.css'; // Ensure consistent layout across browsers\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider } from './contexts/OpenDataContext';\nimport { CollectionsProvider } from './contexts/CollectionsContext';\n\nReactDOM.render(\n  <StateProvider>\n    <CollectionsProvider>\n      <App />\n    </CollectionsProvider>\n  </StateProvider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}