{"version":3,"sources":["utils/socrata.js","contexts/OpenDataContext.jsx","hooks/datasets.js","contexts/CollectionsContext.jsx","hooks/collections.js","components/RawHTML/RawHTML.jsx","components/Dataset/Dataset.jsx","utils/formatters.js","hooks/pagination.jsx","components/MultiSelector/MultiSelector.jsx","layout/HomePage/HomePage.jsx","layout/DatasetPage/DatasetPage.jsx","components/CollectionBar/CollectionBar.jsx","layout/CollectionPage/CollectionPage.jsx","components/CreateCollectionModal/CreateCollectionModal.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["SOCRATA_NY_OPENDATA_ENDPOINT","ALLOWED_JOIN_COLUMNS","getMaifestPage","pageNo","a","async","limit","fetch","then","r","json","matachableColumnsForDataset","dataset","Set","resource","columns_name","columns_field_name","hasJoinableMatch","columns","candidate","candidateCols","intersection","filter","x","has","includes","Array","from","db","Dexie","version","stores","SocrataCache","AppContext","createContext","initalState","datasets","tagList","categories","departments","stateLoaded","reducer","state","action","type","payload","useStateValue","useContext","useJoinableDatasets","useMemo","cols","map","joinableColumns","match","length","id","findJoinable","useDatasets","tags","term","ids","filteredDatasets","d","classification","domain_tags","tag","cat","domain_metadata","find","key","value","name","toLowerCase","useJoinColumnUniqueCount","joins","useState","uniqueCounts","setUniqueCounts","useEffect","promises","forEach","j","col","column","push","replace","errorCode","entry","Object","values","res","distinct","p","catch","Promise","all","result","CollectionsContext","useCollection","dispatch","clearCollection","console","log","addToCollection","datasetID","removeFromCollection","setName","RawHTML","html","className","cleanedHTML","DOMPurify","sanitize","dangerouslySetInnerHTML","__html","Dataset","date","onAddToCollection","onRemoveFromCollection","inCollection","to","attribution","onClick","updatedAt","Date","toLocaleDateString","year","month","day","description","join","usePagination","data","perPage","pages","Math","ceil","currentPageNo","setCurrentPageNo","pageButtons","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","onPageChange","page","selected","containerClassName","subContainerClassName","activeClassName","previousClassName","nextClassName","pageClassName","content","slice","MultiSelector","items","onChange","title","searchTerm","setSearchTerm","itemNames","keys","usePagenation","item","pagedItems","placeholder","e","target","newSelection","i","toggleItem","checked","HomePage","useCategories","useTags","useDepartments","selectedTags","setSelectedTags","selectedCategories","setSelectedCategories","selectedDepartments","setSelectedDepartments","collection","pagedDatasets","DatasetPage","useDataset","params","pagedJoins","page_views","domainMetadata","informationAgency","CollectionContext","CollectionPage","datasetIDs","url","window","location","href","split","useCopyClipboard","isCopied","setCopied","FacebookShareButton","FacebookIcon","TwitterShareButton","TwitterIcon","EmailShareButton","EmailIcon","CreateCollectionModal","history","newCollection","collectionURL","createCollection","App","basename","process","path","exact","component","parentPath","Boolean","hostname","ReactDOM","render","children","useReducer","get","cachedState","JSON","parse","cache_loaded","firstPage","totalEntries","resultSetSize","_","resp","results","list","reduce","datasetPage","allDatasets","getManifest","manifest","totals","getTagList","cats","getCategories","md","department","getDepartments","put","stringify","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e17d9bb.chunk.js","sourcesContent":["const SOCRATA_NY_OPENDATA_ENDPOINT =\n  'https://api.us.socrata.com/api/catalog/v1?domains=data.cityofnewyork.us&search_context=data.cityofnewyork.us';\n\nconst ALLOWED_JOIN_COLUMNS = [\n  'BIN',\n  'BBL',\n  'NTA',\n  'Community Board',\n  'Census Tract',\n  'DBN',\n  'Council District',\n  'School Name',\n  'City Council Districts',\n  'DFTA ID',\n];\n\nasync function getMaifestPage(pageNo, limit = 100) {\n  return fetch(\n    `${SOCRATA_NY_OPENDATA_ENDPOINT}&offset=${pageNo * limit}&limit=${limit}`,\n  ).then((r) => r.json());\n}\n\nfunction matachableColumnsForDataset(dataset) {\n  return new Set([\n    ...dataset.resource.columns_name,\n    ...dataset.resource.columns_field_name,\n  ]);\n}\n\nfunction hasJoinableMatch(columns, candidate) {\n  const candidateCols = matachableColumnsForDataset(candidate);\n  const intersection = new Set(\n    [...columns].filter(\n      (x) => candidateCols.has(x) && ALLOWED_JOIN_COLUMNS.includes(x),\n    ),\n  );\n  return Array.from(intersection);\n}\n\nexport function findJoinable(dataset, datasets) {\n  const cols = matachableColumnsForDataset(dataset);\n  const matches = datasets\n    .map((candidate) => ({\n      dataset: candidate,\n      joinableColumns: hasJoinableMatch(cols, candidate),\n    }))\n    .filter(\n      (match) =>\n        match.joinableColumns.length > 0 &&\n        match.dataset.resource.id !== dataset.resource.id,\n    );\n  return matches;\n}\n\n/**\n * Get the full manifest from Socrata. This should be cached locally and updated in a smart way.\n *\n * @return {Promise(Array)} a promise that resolves to an array of the datasets\n */\nexport async function getManifest() {\n  const firstPage = await getMaifestPage(0, 1);\n  const totalEntries = firstPage.resultSetSize;\n  const pages = Math.ceil(totalEntries / 100);\n  return Promise.all(\n    [...Array(pages)].map((_, i) =>\n      getMaifestPage(i).then((resp) => resp.results),\n    ),\n  ).then((list) =>\n    list.reduce(\n      (datasetPage, allDatasets) => [...allDatasets, ...datasetPage],\n      [],\n    ),\n  );\n}\n\n/**\n * Extract from the datasets array, a unique set of categories.\n * @return {Array<string>} an array of unique categories\n */\nexport function getCategories(datasets) {\n  const categories = datasets.reduce(\n    (cats, dataset) => [\n      ...cats,\n      ...(dataset.classification.categories\n        ? dataset.classification.categories\n        : []),\n    ],\n    [],\n  );\n\n  const counts = categories.reduce(\n    (totals, cat) =>\n      cat in totals\n        ? { ...totals, [cat]: totals[cat] + 1 }\n        : { ...totals, [cat]: 1 },\n    {},\n  );\n  return counts;\n}\n\n/**\n * Extract from the datasets array, a unique set of categories.\n * @return {Array<string>} an array of unique categories\n */\nexport function getDepartments(datasets) {\n  const departments = datasets\n    .map((dataset) =>\n      dataset.classification.domain_metadata.find(\n        (md) => md.key === 'Dataset-Information_Agency',\n      ),\n    )\n    .filter((d) => d)\n    .map((d) => d.value);\n  const counts = departments.reduce(\n    (totals, department) =>\n      department in totals\n        ? { ...totals, [department]: totals[department] + 1 }\n        : { ...totals, [department]: 1 },\n    {},\n  );\n  return counts;\n}\n/**\n * Extract from the datasets array, a unique set of tags.\n * @return {Array<string>} an array of unique tags\n */\nexport function getTagList(datasets) {\n  const tagList = datasets.reduce(\n    (tags, dataset) => [\n      ...tags,\n      ...(dataset.classification.domain_tags\n        ? dataset.classification.domain_tags\n        : []),\n    ],\n    [],\n  );\n  const counts = tagList.reduce(\n    (totals, tag) =>\n      tag in totals\n        ? { ...totals, [tag]: totals[tag] + 1 }\n        : { ...totals, [tag]: 1 },\n    {},\n  );\n  return counts;\n}\n\nexport function getUniqueEntriesCount(dataset, column) {\n  return fetch(\n    `https://data.cityofnewyork.us/resource/${\n      dataset.resource.id\n    }.json?$select=distinct|> select count(*) ${column.replace(/ /g, '_')}`,\n  ).then((r) => r.json());\n}\nexport function getUniqueEntries(dataset, column) {\n  return fetch(\n    `https://data.cityofnewyork.us/resource/${\n      dataset.resource.id\n    }.json?$select=distinct ${column.replace(/ /g, '_')}`,\n  )\n    .then((r) => r.json())\n    .then((r) => {\n      return r.errorCode ? [] : r.map((entry) => Object.values(entry)[0]);\n    });\n}\n","import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport Dexie from 'dexie';\nimport {\n  getManifest,\n  getCategories,\n  getTagList,\n  getDepartments,\n} from '../utils/socrata';\n\nconst db = new Dexie('SocrataCache');\ndb.version(1).stores({\n  SocrataCache: 'id',\n});\n\nexport const AppContext = createContext();\n\nconst initalState = {\n  datasets: [],\n  tagList: [],\n  categories: [],\n  departments: [],\n  stateLoaded: false,\n};\n\nconst reducer = (state, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case 'UPDATE_OPEN_DATASET_MANIFEST':\n      return { ...state, datasets: payload };\n    case 'UPDATE_TAGS':\n      return { ...state, tagList: payload };\n    case 'UPDATE_CATEGORIES':\n      return { ...state, categories: payload };\n    case 'UPDATE_DEPARTMENTS':\n      return { ...state, departments: payload };\n    case 'HYDRATE_STATE':\n      return { ...state, ...payload };\n    case 'SET_LOADED':\n      return { ...state, stateLoaded: true };\n    default:\n      return state;\n  }\n};\n\nexport const StateProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initalState);\n\n  // Try to get the state locally from indexed db... if we can't find it there, request it from the\n  // socrata API\n\n  useEffect(() => {\n    db.SocrataCache.get(1).then((result) => {\n      if (result) {\n        const cachedState = JSON.parse(result.data);\n        dispatch({\n          type: 'HYDRATE_STATE',\n          payload: { ...initalState, ...cachedState, cache_loaded: true },\n        });\n      } else {\n        getManifest().then((manifest) => {\n          const tagList = getTagList(manifest);\n          const categories = getCategories(manifest);\n          const departments = getDepartments(manifest);\n          dispatch({\n            type: 'UPDATE_OPEN_DATASET_MANIFEST',\n            payload: manifest,\n          });\n          dispatch({\n            type: 'UPDATE_TAGS',\n            payload: tagList,\n          });\n          dispatch({\n            type: 'UPDATE_CATEGORIES',\n            payload: categories,\n          });\n          dispatch({\n            type: 'UPDATE_DEPARTMENTS',\n            payload: departments,\n          });\n          dispatch({\n            type: 'SET_LOADED',\n          });\n        });\n      }\n    });\n  }, []);\n\n  // If our datasets change, update the cahced version\n  const { datasets, tagList, categories, departments, stateLoaded } = state;\n  useEffect(() => {\n    if (stateLoaded) {\n      db.SocrataCache.put({\n        data: JSON.stringify({\n          datasets,\n          tagList,\n          categories,\n          departments,\n        }),\n        id: 1,\n      });\n    }\n  }, [datasets, tagList, categories, departments, stateLoaded]);\n\n  return (\n    <AppContext.Provider value={[state, dispatch]}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport const useStateValue = () => useContext(AppContext);\n","import { useMemo, useState, useEffect } from 'react';\nimport { useStateValue } from '../contexts/OpenDataContext';\nimport { findJoinable, getUniqueEntries } from '../utils/socrata';\n\nexport function useTags() {\n  const [{ tagList }] = useStateValue();\n  return tagList;\n}\n\nexport function useCategories() {\n  const [{ categories }] = useStateValue();\n  return categories;\n}\n\nexport function useDepartments() {\n  const [{ departments }] = useStateValue();\n  return departments;\n}\n\nexport function useJoinableDatasets(dataset) {\n  const [{ datasets }] = useStateValue();\n  return useMemo(() => (dataset ? findJoinable(dataset, datasets) : []), [\n    dataset,\n    datasets,\n  ]);\n}\n\nexport function useDataset(datasetID) {\n  const [{ datasets }] = useStateValue();\n  return datasets.find((d) => d.resource.id === datasetID);\n}\n\nexport function useDatasets({ tags, term, categories, departments, ids }) {\n  const [{ datasets }] = useStateValue();\n\n  return useMemo(() => {\n    let filteredDatasets = [...datasets];\n\n    if (ids) {\n      return filteredDatasets.filter((d) => ids.includes(d.resource.id));\n    }\n\n    if (tags && tags.length > 0) {\n      filteredDatasets = filteredDatasets.filter(\n        (dataset) =>\n          dataset.classification.domain_tags.filter((tag) => tags.includes(tag))\n            .length > 0,\n      );\n    }\n\n    if (categories && categories.length > 0) {\n      filteredDatasets = filteredDatasets.filter(\n        (dataset) =>\n          dataset.classification.categories.filter((cat) =>\n            categories.includes(cat),\n          ).length > 0,\n      );\n    }\n\n    if (departments && departments > 0) {\n      filteredDatasets = filteredDatasets.filter((dataset) =>\n        departments.includes(\n          dataset.classification.domain_metadata.find(\n            (d) => d.key === 'Dataset-Information_Agency',\n          )?.value,\n        ),\n      );\n    }\n    if (term && term.length > 0) {\n      filteredDatasets = filteredDatasets.filter((dataset) =>\n        dataset.resource.name.toLowerCase().includes(term.toLowerCase()),\n      );\n    }\n\n    return filteredDatasets;\n  }, [datasets, ids, tags, categories, departments, term]);\n}\n\nexport function useJoinColumnUniqueCount(joins) {\n  const [uniqueCounts, setUniqueCounts] = useState([]);\n  useEffect(() => {\n    let promises = [];\n    joins.forEach((j) => {\n      j.joinableColumns.forEach((col) => {\n        promises.push(\n          getUniqueEntries(j.dataset, col).then((res) => ({\n            dataset: j.dataset.resource.id,\n            col,\n            distinct: res,\n          })),\n        );\n      });\n    });\n    // This ensures that we resolve even if one of our fetch requests fail\n    promises = promises.map((p) => p.catch(() => undefined));\n    Promise.all(promises).then((result) => setUniqueCounts(result));\n  }, [joins]);\n  return uniqueCounts;\n}\n","import React, { createContext, useContext, useReducer } from 'react';\n\nexport const CollectionsContext = createContext();\n\nconst initalState = {\n  datasets: [],\n  name: null,\n};\n\nconst reducer = (state, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case 'ADD_TO_COLLECTION':\n      return { ...state, datasets: [...state.datasets, payload] };\n    case 'REMOVE_FROM_COLLECTION':\n      return {\n        ...state,\n        datasets: state.datasets.filter((d) => d !== payload),\n      };\n    case 'SET_NAME':\n      return {\n        ...state,\n        name: payload,\n      };\n    case 'CLEAR_COLLECTION':\n      return {\n        ...state,\n        datasets: [],\n      };\n    default:\n      return state;\n  }\n};\n\nexport const CollectionsProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initalState);\n\n  return (\n    <CollectionsContext.Provider value={[state, dispatch]}>\n      {children}\n    </CollectionsContext.Provider>\n  );\n};\n\nexport const useCollectionsValue = () => useContext(CollectionsContext);\n","import { useCollectionsValue } from '../contexts/CollectionsContext';\n\nexport default function useCollection() {\n  const [state, dispatch] = useCollectionsValue();\n  const addToCollection = (datasetID) =>\n    dispatch({ type: 'ADD_TO_COLLECTION', payload: datasetID });\n  const removeFromCollection = (datasetID) =>\n    dispatch({ type: 'REMOVE_FROM_COLLECTION', payload: datasetID });\n  const setName = (name) => dispatch({ type: 'SET_NAME', payload: name });\n\n  const clearCollection = () => {\n    console.log('clearning');\n    dispatch({ type: 'CLEAR_COLLECTION' });\n  };\n\n  return [\n    state,\n    { clearCollection, addToCollection, removeFromCollection, setName },\n  ];\n}\n","import React from 'react';\nimport DOMPurify from 'dompurify';\n\n/* Simple component to sanitize HTML and display it.\n *  Need this for making sure we can display the\n *  dataset descriptions properly\n */\n\nexport default function RawHTML({ html, className }) {\n  const cleanedHTML = DOMPurify.sanitize(html);\n  return (\n    <div\n      className={className}\n      dangerouslySetInnerHTML={{ __html: cleanedHTML }}\n    />\n  );\n}\n","import React from 'react';\nimport './Dataset.scss';\nimport { Link } from 'react-router-dom';\nimport { formatDate } from '../../utils/formatters';\nimport RawHTML from '../RawHTML/RawHTML';\n\nexport default function Dataset({\n  dataset,\n  onAddToCollection,\n  onRemoveFromCollection,\n  inCollection,\n}) {\n  return (\n    <div className=\"dataset\" key={dataset.resource.id}>\n      <div className=\"dataset-title\">\n        <Link to={`/dataset/${dataset.resource.id}`}>\n          <h2>{dataset.resource.name}</h2>\n        </Link>\n        <p>{dataset.resource.attribution}</p>\n      </div>\n\n      {onAddToCollection && (\n        <button\n          className=\"collection-button\"\n          type=\"button\"\n          onClick={() =>\n            inCollection\n              ? onRemoveFromCollection(dataset.resource.id)\n              : onAddToCollection(dataset.resource.id)\n          }\n        >\n          {inCollection ? 'Remove from collection' : 'Add to collection'}\n        </button>\n      )}\n\n      <div className=\"dataset-last-update\">\n        <p className=\"header\">Last Updated</p>\n        <p>{formatDate(dataset.resource.updatedAt)}</p>\n      </div>\n\n      <RawHTML\n        className=\"dataset-description\"\n        html={dataset.resource.description}\n      />\n      <div className=\"dataset-meta\">\n        <div className=\"update-frequency\">\n          <span>Update frequency:</span>\n          weekly\n        </div>\n        <div className=\"dataset-tags\">\n          <span>Tags:</span>\n          {dataset.classification.domain_tags.join(', ')}\n        </div>\n      </div>\n    </div>\n  );\n}\n","export function formatDate(date) {\n  const options = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  };\n  return new Date(date).toLocaleDateString('en-US', options);\n}\n","import React, { useState, useMemo, useEffect } from 'react';\nimport ReactPaginate from 'react-paginate';\n\nexport default function usePagination(data, perPage = 20) {\n  const pages = useMemo(() => Math.ceil(data.length / perPage), [\n    data,\n    perPage,\n  ]);\n  const [currentPageNo, setCurrentPageNo] = useState(0);\n\n  useEffect(() => {\n    setCurrentPageNo(0);\n  }, [data]);\n\n  const pageButtons = (\n    <nav>\n      <ReactPaginate\n        previousLabel=\"previous\"\n        nextLabel=\"next\"\n        breakLabel=\"...\"\n        breakClassName=\"break-me\"\n        pageCount={pages}\n        onPageChange={({ selected: page }) => {\n          setCurrentPageNo(page);\n        }}\n        containerClassName=\"pagination\"\n        subContainerClassName=\"pages pagination\"\n        activeClassName=\"active\"\n        previousClassName=\"page-item\"\n        nextClassName=\"page-item\"\n        pageClassName=\"page-item\"\n      />\n    </nav>\n  );\n\n  const content = useMemo(\n    () => data.slice(currentPageNo * perPage, (currentPageNo + 1) * perPage),\n    [perPage, currentPageNo, data],\n  );\n\n  return [\n    content,\n    {\n      pageButtons,\n    },\n  ];\n}\n","import React, { useState, useMemo } from 'react';\nimport usePagenation from '../../hooks/pagination';\nimport './MultiSelector.scss';\n\nexport default function MultiSelector({ items, selected, onChange, title }) {\n  const clearItems = () => {\n    onChange([]);\n  };\n\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const toggleItem = (item) => {\n    const newSelection = selected.includes(item)\n      ? selected.filter((i) => i !== item)\n      : [...selected, item];\n\n    onChange(newSelection);\n  };\n\n  const itemNames = useMemo(() => Object.keys(items), [items]);\n\n  const filteredItems = useMemo(\n    () =>\n      itemNames ? itemNames.filter((item) => item.includes(searchTerm)) : [],\n    [itemNames, searchTerm],\n  );\n\n  const [pagedItems, { pageButtons }] = usePagenation(filteredItems, 10);\n\n  return (\n    <div className=\"mutli-selector\">\n      <h2>{title}</h2>\n      <div className=\"search\">\n        <input\n          placeholder=\"filter\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n        />\n      </div>\n      <ul className=\"multi-list\">\n        {pagedItems.map((item) => (\n          /* eslint-disable */\n          <li\n            key={item}\n            onClick={() => toggleItem(item)}\n            className={`multi-buttons ${\n              selected && selected.includes(item) ? 'selected' : ''\n            }`}\n          >\n            <input\n              type=\"checkbox\"\n              checked={selected && selected.includes(item)}\n              className=\"checkbox\"\n            />\n            <span className=\"item-name\">{item}</span>\n            <span className=\"pill\">{items[item]}</span>\n          </li>\n          /* eslint-enable */\n        ))}\n      </ul>\n      {pageButtons}\n      {selected && selected.length > 0 && (\n        <button type=\"button\" onClick={clearItems}>\n          clear\n        </button>\n      )}\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport './HomePage.scss';\nimport {\n  useCategories,\n  useTags,\n  useDepartments,\n  useDatasets,\n} from '../../hooks/datasets';\nimport useCollection from '../../hooks/collections';\nimport Dataset from '../../components/Dataset/Dataset';\nimport usePagination from '../../hooks/pagination';\nimport MultiSelector from '../../components/MultiSelector/MultiSelector';\n\nexport default function HomePage() {\n  const categories = useCategories();\n  const tags = useTags();\n  const departments = useDepartments();\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [selectedCategories, setSelectedCategories] = useState([]);\n  const [selectedDepartments, setSelectedDepartments] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [\n    collection,\n    { addToCollection, removeFromCollection },\n  ] = useCollection();\n\n  const datasets = useDatasets({\n    tags: selectedTags,\n    categories: selectedCategories,\n    term: searchTerm,\n    departments: selectedDepartments,\n  });\n  const [pagedDatasets, { pageButtons }] = usePagination(datasets, 5);\n\n  return (\n    <div className=\"home-page\">\n      <div className=\"filters\">\n        <div className=\"categories\">\n          <MultiSelector\n            items={categories}\n            onChange={setSelectedCategories}\n            selected={selectedCategories}\n            title=\"Categories\"\n          />\n        </div>\n        <div className=\"tags\">\n          <MultiSelector\n            items={tags}\n            selected={selectedTags}\n            onChange={setSelectedTags}\n            title=\"Tags\"\n          />\n        </div>\n        <div className=\"departments\">\n          <MultiSelector\n            items={departments}\n            selected={selectedDepartments}\n            onChange={setSelectedDepartments}\n            title=\"Departments\"\n          />\n        </div>\n      </div>\n      <div className=\"datasets\">\n        <div className=\"search\">\n          <input\n            type=\"text\"\n            onChange={(e) => setSearchTerm(e.target.value)}\n            value={searchTerm}\n            placeholder=\"Search for dataset\"\n          />\n        </div>\n        <div className=\"count-and-sort\">\n          <p>\n            <span className=\"bold\">{datasets.length}</span> datasets\n          </p>\n          <p>\n            Sort by: <span className=\"bold\">Recently updated</span>\n          </p>\n        </div>\n\n        <ul className=\"dataset-list\">\n          {pagedDatasets.map((dataset) => (\n            <Dataset\n              key={dataset?.resource?.id}\n              dataset={dataset}\n              inCollection={collection.datasets.includes(dataset.resource.id)}\n              onAddToCollection={addToCollection}\n              onRemoveFromCollection={removeFromCollection}\n            />\n          ))}\n        </ul>\n        <div>{pageButtons}</div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport moment from 'moment';\nimport upperFirst from 'lodash/upperFirst';\nimport Table from 'react-bootstrap/Table';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport { Link } from 'react-router-dom';\nimport RawHTML from '../../components/RawHTML/RawHTML';\nimport ColumnMatchTable from '../../components/ColumnMatchTable/ColumnMatchTable';\nimport usePagination from '../../hooks/pagination';\nimport {\n  useDataset,\n  useJoinableDatasets,\n  useJoinColumnUniqueCount,\n} from '../../hooks/datasets';\nimport './DatasetPage.scss';\n\nconst formatDate = (date) => moment(date).format('MMMM DD, YYYY');\n\nexport default function DatasetPage({ match }) {\n  const { datasetID } = match.params;\n  const dataset = useDataset(datasetID);\n  const joins = useJoinableDatasets(dataset);\n  const [pagedJoins, { pageButtons: joinPageButtons }] = usePagination(joins);\n\n  const joinCounts = useJoinColumnUniqueCount(pagedJoins);\n  const resource = dataset?.resource;\n  const pageViews = resource?.page_views;\n  const classification = dataset?.classification;\n  const domainMetadata = classification?.domain_metadata;\n  const updatedAutomation = domainMetadata?.find(\n    ({ key, value }) => key === 'Update_Automation' && value === 'No',\n  )?.value;\n  const updateFrequency = domainMetadata?.find(\n    ({ key }) => key === 'Update_Update-Frequency',\n  )?.value;\n\n  const informationAgency = domainMetadata?.find(\n    ({ key }) => key === 'Dataset-Information_Agency',\n  )?.value;\n  console.log(dataset);\n  return dataset ? (\n    <div className=\"dataset-page\">\n      <div className=\"dataset-details\">\n        <h2>{resource.name}</h2>\n        <p>{informationAgency}</p>\n        <p>{resource.description}</p>\n        <h3>Metadata</h3>\n        <h3>Updated</h3>\n      </div>\n      <div className=\"dataset-recomendataions\">\n        <h2>Recomendations</h2>\n        <h3>Potential Join Columns</h3>\n        <p>\n          Find datasets that share a column with the current dataset. These\n          columns might be interesting datasets to join with the current dataset\n          to add additional details or bring in context\n        </p>\n      </div>\n    </div>\n  ) : (\n    <h1>Loading...</h1>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport useCollection from '../../hooks/collections';\nimport './CollectionBar.scss';\n\nexport default function CollectionContext() {\n  const [collection, { clearCollection }] = useCollection();\n  if (collection.datasets && collection.datasets.length > 0) {\n    return (\n      <div className=\"collection-bar\">\n        <span>{collection.datasets.length} datasets selected</span>\n        <Link to=\"/collection/new\">\n          <button type=\"submit\">Create Collection</button>\n        </Link>\n        <button type=\"button\" onClick={clearCollection}>\n          Clear\n        </button>\n      </div>\n    );\n  }\n  return null;\n}\n","import React from 'react';\nimport { useCopyClipboard } from '@lokibai/react-use-copy-clipboard';\nimport './CollectionPage.scss';\n\nimport {\n  EmailShareButton,\n  FacebookShareButton,\n  TwitterShareButton,\n  EmailIcon,\n  FacebookIcon,\n  TwitterIcon,\n} from 'react-share';\nimport { useDatasets } from '../../hooks/datasets';\nimport Dataset from '../../components/Dataset/Dataset';\n\nexport default function CollectionPage({ match }) {\n  const { name, datasetIDs } = match.params;\n  const url = window.location.href;\n  const datasets = useDatasets({ ids: datasetIDs.split(',') });\n\n  const [isCopied, setCopied] = useCopyClipboard(`${url}`);\n  return (\n    <div className=\"collections-page\">\n      <h1>{name}</h1>\n      {datasets.map((dataset) => (\n        <Dataset dataset={dataset} />\n      ))}\n      <div className=\"share\">\n        Share this collection:\n        <p>\n          <FacebookShareButton url={url}>\n            <FacebookIcon />\n          </FacebookShareButton>{' '}\n          <TwitterShareButton url={url}>\n            <TwitterIcon />\n          </TwitterShareButton>\n          <EmailShareButton url={url}>\n            <EmailIcon />\n          </EmailShareButton>\n        </p>\n        <p>\n          Share link {url}{' '}\n          <button type=\"button\" onClick={setCopied}>\n            {' '}\n            {isCopied ? 'Copied' : 'Copy'}{' '}\n          </button>\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport useCollection from '../../hooks/collections';\nimport { useDatasets } from '../../hooks/datasets';\nimport './CreateCollectionModal.scss';\n\nexport default function CreateCollectionModal({ history }) {\n  const [collection, { setName }] = useCollection();\n  const datasets = useDatasets({ ids: collection.datasets });\n\n  const createCollection = (newCollection) => {\n    const collectionURL = `/collection/${\n      newCollection.name\n    }/${newCollection.datasets.join(',')}`;\n    history.push(collectionURL);\n  };\n\n  return (\n    <div className=\"create-collection-modal\">\n      <h3>Create collection with the following datasets</h3>\n      <ul>\n        {datasets.map((dataset) => (\n          <li>{dataset.resource.name}</li>\n        ))}\n      </ul>\n      <input\n        type=\"text\"\n        placeholder=\"Name\"\n        value={collection.name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <button type=\"submit\" onClick={() => createCollection(collection)}>\n        Create\n      </button>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.scss';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\nimport { ModalContainer, ModalRoute } from 'react-router-modal';\nimport HomePage from './layout/HomePage/HomePage';\nimport DatasetPage from './layout/DatasetPage/DatasetPage';\nimport CollectionBar from './components/CollectionBar/CollectionBar';\nimport CollectionPage from './layout/CollectionPage/CollectionPage';\nimport CreateCollectionModal from './components/CreateCollectionModal/CreateCollectionModal';\n\nimport 'react-router-modal/css/react-router-modal.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Data Clinic</h1>\n      </header>\n      <ModalContainer />\n      <div className=\"content\">\n        <Router basename={process.env.PUBLIC_URL}>\n          <Switch>\n            <Route path=\"/\" exact component={HomePage} />\n            <Route path=\"/dataset/:datasetID\" exact component={DatasetPage} />\n            <Route\n              path=\"/collection/:name/:datasetIDs\"\n              exact\n              component={CollectionPage}\n            />\n\n            <ModalRoute\n              path=\"/collection/new\"\n              parentPath=\"/\"\n              component={CreateCollectionModal}\n            />\n            <Redirect from=\"/\" to=\"/\" />\n          </Switch>\n          <CollectionBar />\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'normalize.css'; // Ensure consistent layout across browsers\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider } from './contexts/OpenDataContext';\nimport { CollectionsProvider } from './contexts/CollectionsContext';\n\nReactDOM.render(\n  <StateProvider>\n    <CollectionsProvider>\n      <App />\n    </CollectionsProvider>\n  </StateProvider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}